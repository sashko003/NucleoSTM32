
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b2c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001cc0  08001cc0  00011cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cf0  08001cf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cf0  08001cf0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cf0  08001cf0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cf0  08001cf0  00011cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cf4  08001cf4  00011cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001d04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001d04  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043d9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d8e  00000000  00000000  00024415  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003e0  00000000  00000000  000251a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000358  00000000  00000000  00025588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001abd3  00000000  00000000  000258e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000416a  00000000  00000000  000404b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d4e8  00000000  00000000  0004461d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e1b05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000da8  00000000  00000000  000e1b80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001ca8 	.word	0x08001ca8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001ca8 	.word	0x08001ca8

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f914 	bl	8000404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f80c 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f846 	bl	8000270 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80001e4:	2120      	movs	r1, #32
 80001e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ea:	f000 fc1b 	bl	8000a24 <HAL_GPIO_TogglePin>
    HAL_Delay(DELAY);
 80001ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f2:	f000 f96d 	bl	80004d0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80001f6:	e7f5      	b.n	80001e4 <main+0x10>

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	; 0x40
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fd46 	bl	8001c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021e:	2301      	movs	r3, #1
 8000220:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000222:	2310      	movs	r3, #16
 8000224:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000226:	2300      	movs	r3, #0
 8000228:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fc12 	bl	8000a58 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800023a:	f000 f849 	bl	80002d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fb14 	bl	8001884 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000262:	f000 f835 	bl	80002d0 <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3740      	adds	r7, #64	; 0x40
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <MX_GPIO_Init+0x5c>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a10      	ldr	r2, [pc, #64]	; (80002cc <MX_GPIO_Init+0x5c>)
 800028a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800028e:	6153      	str	r3, [r2, #20]
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <MX_GPIO_Init+0x5c>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000298:	603b      	str	r3, [r7, #0]
 800029a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	2120      	movs	r1, #32
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a4:	f000 fba6 	bl	80009f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80002a8:	2320      	movs	r3, #32
 80002aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ac:	2301      	movs	r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b4:	2300      	movs	r3, #0
 80002b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	4619      	mov	r1, r3
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c0:	f000 fa0e 	bl	80006e0 <HAL_GPIO_Init>

}
 80002c4:	bf00      	nop
 80002c6:	3718      	adds	r7, #24
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40021000 	.word	0x40021000

080002d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
	...

080002e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <HAL_MspInit+0x44>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <HAL_MspInit+0x44>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6193      	str	r3, [r2, #24]
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <HAL_MspInit+0x44>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <HAL_MspInit+0x44>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	4a08      	ldr	r2, [pc, #32]	; (8000324 <HAL_MspInit+0x44>)
 8000304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000308:	61d3      	str	r3, [r2, #28]
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <HAL_MspInit+0x44>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000312:	603b      	str	r3, [r7, #0]
 8000314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000

08000328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr

08000336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800033a:	e7fe      	b.n	800033a <HardFault_Handler+0x4>

0800033c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000340:	e7fe      	b.n	8000340 <MemManage_Handler+0x4>

08000342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <BusFault_Handler+0x4>

08000348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <UsageFault_Handler+0x4>

0800034e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr

0800036a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800037c:	f000 f888 	bl	8000490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}

08000384 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <SystemInit+0x28>)
 800038a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038e:	4a07      	ldr	r2, [pc, #28]	; (80003ac <SystemInit+0x28>)
 8000390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <SystemInit+0x28>)
 800039a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800039e:	609a      	str	r2, [r3, #8]
#endif
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003b6:	e003      	b.n	80003c0 <LoopCopyDataInit>

080003b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80003ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003be:	3104      	adds	r1, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80003c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003c8:	d3f6      	bcc.n	80003b8 <CopyDataInit>
	ldr	r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80003cc:	e002      	b.n	80003d4 <LoopFillZerobss>

080003ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003d0:	f842 3b04 	str.w	r3, [r2], #4

080003d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <LoopForever+0x16>)
	cmp	r2, r3
 80003d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003d8:	d3f9      	bcc.n	80003ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003da:	f7ff ffd3 	bl	8000384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003de:	f001 fc37 	bl	8001c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003e2:	f7ff fef7 	bl	80001d4 <main>

080003e6 <LoopForever>:

LoopForever:
    b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003e8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80003ec:	08001cf8 	.word	0x08001cf8
	ldr	r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003f4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80003f8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80003fc:	2000002c 	.word	0x2000002c

08000400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC1_2_IRQHandler>
	...

08000404 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <HAL_Init+0x28>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a07      	ldr	r2, [pc, #28]	; (800042c <HAL_Init+0x28>)
 800040e:	f043 0310 	orr.w	r3, r3, #16
 8000412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000414:	2003      	movs	r0, #3
 8000416:	f000 f92f 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800041a:	2000      	movs	r0, #0
 800041c:	f000 f808 	bl	8000430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000420:	f7ff ff5e 	bl	80002e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000424:	2300      	movs	r3, #0
}
 8000426:	4618      	mov	r0, r3
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40022000 	.word	0x40022000

08000430 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <HAL_InitTick+0x54>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	4b12      	ldr	r3, [pc, #72]	; (8000488 <HAL_InitTick+0x58>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4619      	mov	r1, r3
 8000442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000446:	fbb3 f3f1 	udiv	r3, r3, r1
 800044a:	fbb2 f3f3 	udiv	r3, r2, r3
 800044e:	4618      	mov	r0, r3
 8000450:	f000 f939 	bl	80006c6 <HAL_SYSTICK_Config>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800045a:	2301      	movs	r3, #1
 800045c:	e00e      	b.n	800047c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b0f      	cmp	r3, #15
 8000462:	d80a      	bhi.n	800047a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000464:	2200      	movs	r2, #0
 8000466:	6879      	ldr	r1, [r7, #4]
 8000468:	f04f 30ff 	mov.w	r0, #4294967295
 800046c:	f000 f90f 	bl	800068e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000470:	4a06      	ldr	r2, [pc, #24]	; (800048c <HAL_InitTick+0x5c>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000476:	2300      	movs	r3, #0
 8000478:	e000      	b.n	800047c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800047a:	2301      	movs	r3, #1
}
 800047c:	4618      	mov	r0, r3
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000000 	.word	0x20000000
 8000488:	20000008 	.word	0x20000008
 800048c:	20000004 	.word	0x20000004

08000490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_IncTick+0x20>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	461a      	mov	r2, r3
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_IncTick+0x24>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4413      	add	r3, r2
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <HAL_IncTick+0x24>)
 80004a2:	6013      	str	r3, [r2, #0]
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	20000008 	.word	0x20000008
 80004b4:	20000028 	.word	0x20000028

080004b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <HAL_GetTick+0x14>)
 80004be:	681b      	ldr	r3, [r3, #0]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000028 	.word	0x20000028

080004d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004d8:	f7ff ffee 	bl	80004b8 <HAL_GetTick>
 80004dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004e8:	d005      	beq.n	80004f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <HAL_Delay+0x40>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	461a      	mov	r2, r3
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4413      	add	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004f6:	bf00      	nop
 80004f8:	f7ff ffde 	bl	80004b8 <HAL_GetTick>
 80004fc:	4602      	mov	r2, r0
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	429a      	cmp	r2, r3
 8000506:	d8f7      	bhi.n	80004f8 <HAL_Delay+0x28>
  {
  }
}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000008 	.word	0x20000008

08000514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f003 0307 	and.w	r3, r3, #7
 8000522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <__NVIC_SetPriorityGrouping+0x44>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000530:	4013      	ands	r3, r2
 8000532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800053c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000546:	4a04      	ldr	r2, [pc, #16]	; (8000558 <__NVIC_SetPriorityGrouping+0x44>)
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	60d3      	str	r3, [r2, #12]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <__NVIC_GetPriorityGrouping+0x18>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	0a1b      	lsrs	r3, r3, #8
 8000566:	f003 0307 	and.w	r3, r3, #7
}
 800056a:	4618      	mov	r0, r3
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	db0a      	blt.n	80005a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	b2da      	uxtb	r2, r3
 8000590:	490c      	ldr	r1, [pc, #48]	; (80005c4 <__NVIC_SetPriority+0x4c>)
 8000592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000596:	0112      	lsls	r2, r2, #4
 8000598:	b2d2      	uxtb	r2, r2
 800059a:	440b      	add	r3, r1
 800059c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a0:	e00a      	b.n	80005b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4908      	ldr	r1, [pc, #32]	; (80005c8 <__NVIC_SetPriority+0x50>)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f003 030f 	and.w	r3, r3, #15
 80005ae:	3b04      	subs	r3, #4
 80005b0:	0112      	lsls	r2, r2, #4
 80005b2:	b2d2      	uxtb	r2, r2
 80005b4:	440b      	add	r3, r1
 80005b6:	761a      	strb	r2, [r3, #24]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000e100 	.word	0xe000e100
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b089      	sub	sp, #36	; 0x24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	f1c3 0307 	rsb	r3, r3, #7
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	bf28      	it	cs
 80005ea:	2304      	movcs	r3, #4
 80005ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	3304      	adds	r3, #4
 80005f2:	2b06      	cmp	r3, #6
 80005f4:	d902      	bls.n	80005fc <NVIC_EncodePriority+0x30>
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	3b03      	subs	r3, #3
 80005fa:	e000      	b.n	80005fe <NVIC_EncodePriority+0x32>
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	f04f 32ff 	mov.w	r2, #4294967295
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	43da      	mvns	r2, r3
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	401a      	ands	r2, r3
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000614:	f04f 31ff 	mov.w	r1, #4294967295
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	fa01 f303 	lsl.w	r3, r1, r3
 800061e:	43d9      	mvns	r1, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	4313      	orrs	r3, r2
         );
}
 8000626:	4618      	mov	r0, r3
 8000628:	3724      	adds	r7, #36	; 0x24
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3b01      	subs	r3, #1
 8000640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000644:	d301      	bcc.n	800064a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000646:	2301      	movs	r3, #1
 8000648:	e00f      	b.n	800066a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <SysTick_Config+0x40>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3b01      	subs	r3, #1
 8000650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000652:	210f      	movs	r1, #15
 8000654:	f04f 30ff 	mov.w	r0, #4294967295
 8000658:	f7ff ff8e 	bl	8000578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <SysTick_Config+0x40>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <SysTick_Config+0x40>)
 8000664:	2207      	movs	r2, #7
 8000666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	e000e010 	.word	0xe000e010

08000678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ff47 	bl	8000514 <__NVIC_SetPriorityGrouping>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b086      	sub	sp, #24
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006a0:	f7ff ff5c 	bl	800055c <__NVIC_GetPriorityGrouping>
 80006a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	68b9      	ldr	r1, [r7, #8]
 80006aa:	6978      	ldr	r0, [r7, #20]
 80006ac:	f7ff ff8e 	bl	80005cc <NVIC_EncodePriority>
 80006b0:	4602      	mov	r2, r0
 80006b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff5d 	bl	8000578 <__NVIC_SetPriority>
}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ffb0 	bl	8000634 <SysTick_Config>
 80006d4:	4603      	mov	r3, r0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b087      	sub	sp, #28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006ee:	e160      	b.n	80009b2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	2101      	movs	r1, #1
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	fa01 f303 	lsl.w	r3, r1, r3
 80006fc:	4013      	ands	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	f000 8152 	beq.w	80009ac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	2b02      	cmp	r3, #2
 800070e:	d003      	beq.n	8000718 <HAL_GPIO_Init+0x38>
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2b12      	cmp	r3, #18
 8000716:	d123      	bne.n	8000760 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	08da      	lsrs	r2, r3, #3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3208      	adds	r2, #8
 8000720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000724:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	f003 0307 	and.w	r3, r3, #7
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	220f      	movs	r2, #15
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	43db      	mvns	r3, r3
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	4013      	ands	r3, r2
 800073a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	691a      	ldr	r2, [r3, #16]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	4313      	orrs	r3, r2
 8000750:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	08da      	lsrs	r2, r3, #3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3208      	adds	r2, #8
 800075a:	6939      	ldr	r1, [r7, #16]
 800075c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	2203      	movs	r2, #3
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	43db      	mvns	r3, r3
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	4013      	ands	r3, r2
 8000776:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	f003 0203 	and.w	r2, r3, #3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	4313      	orrs	r3, r2
 800078c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d00b      	beq.n	80007b4 <HAL_GPIO_Init+0xd4>
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d007      	beq.n	80007b4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007a8:	2b11      	cmp	r3, #17
 80007aa:	d003      	beq.n	80007b4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	2b12      	cmp	r3, #18
 80007b2:	d130      	bne.n	8000816 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	2203      	movs	r2, #3
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	43db      	mvns	r3, r3
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	68da      	ldr	r2, [r3, #12]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	4313      	orrs	r3, r2
 80007dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	693a      	ldr	r2, [r7, #16]
 80007e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ea:	2201      	movs	r2, #1
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43db      	mvns	r3, r3
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	4013      	ands	r3, r2
 80007f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	091b      	lsrs	r3, r3, #4
 8000800:	f003 0201 	and.w	r2, r3, #1
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	4313      	orrs	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	2203      	movs	r2, #3
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	43db      	mvns	r3, r3
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	4013      	ands	r3, r2
 800082c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	4313      	orrs	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	2b00      	cmp	r3, #0
 8000850:	f000 80ac 	beq.w	80009ac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000854:	4b5e      	ldr	r3, [pc, #376]	; (80009d0 <HAL_GPIO_Init+0x2f0>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a5d      	ldr	r2, [pc, #372]	; (80009d0 <HAL_GPIO_Init+0x2f0>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b5b      	ldr	r3, [pc, #364]	; (80009d0 <HAL_GPIO_Init+0x2f0>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800086c:	4a59      	ldr	r2, [pc, #356]	; (80009d4 <HAL_GPIO_Init+0x2f4>)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	089b      	lsrs	r3, r3, #2
 8000872:	3302      	adds	r3, #2
 8000874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	f003 0303 	and.w	r3, r3, #3
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	220f      	movs	r2, #15
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000896:	d025      	beq.n	80008e4 <HAL_GPIO_Init+0x204>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a4f      	ldr	r2, [pc, #316]	; (80009d8 <HAL_GPIO_Init+0x2f8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d01f      	beq.n	80008e0 <HAL_GPIO_Init+0x200>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a4e      	ldr	r2, [pc, #312]	; (80009dc <HAL_GPIO_Init+0x2fc>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d019      	beq.n	80008dc <HAL_GPIO_Init+0x1fc>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a4d      	ldr	r2, [pc, #308]	; (80009e0 <HAL_GPIO_Init+0x300>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d013      	beq.n	80008d8 <HAL_GPIO_Init+0x1f8>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a4c      	ldr	r2, [pc, #304]	; (80009e4 <HAL_GPIO_Init+0x304>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d00d      	beq.n	80008d4 <HAL_GPIO_Init+0x1f4>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a4b      	ldr	r2, [pc, #300]	; (80009e8 <HAL_GPIO_Init+0x308>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d007      	beq.n	80008d0 <HAL_GPIO_Init+0x1f0>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a4a      	ldr	r2, [pc, #296]	; (80009ec <HAL_GPIO_Init+0x30c>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d101      	bne.n	80008cc <HAL_GPIO_Init+0x1ec>
 80008c8:	2306      	movs	r3, #6
 80008ca:	e00c      	b.n	80008e6 <HAL_GPIO_Init+0x206>
 80008cc:	2307      	movs	r3, #7
 80008ce:	e00a      	b.n	80008e6 <HAL_GPIO_Init+0x206>
 80008d0:	2305      	movs	r3, #5
 80008d2:	e008      	b.n	80008e6 <HAL_GPIO_Init+0x206>
 80008d4:	2304      	movs	r3, #4
 80008d6:	e006      	b.n	80008e6 <HAL_GPIO_Init+0x206>
 80008d8:	2303      	movs	r3, #3
 80008da:	e004      	b.n	80008e6 <HAL_GPIO_Init+0x206>
 80008dc:	2302      	movs	r3, #2
 80008de:	e002      	b.n	80008e6 <HAL_GPIO_Init+0x206>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <HAL_GPIO_Init+0x206>
 80008e4:	2300      	movs	r3, #0
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	f002 0203 	and.w	r2, r2, #3
 80008ec:	0092      	lsls	r2, r2, #2
 80008ee:	4093      	lsls	r3, r2
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008f6:	4937      	ldr	r1, [pc, #220]	; (80009d4 <HAL_GPIO_Init+0x2f4>)
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	089b      	lsrs	r3, r3, #2
 80008fc:	3302      	adds	r3, #2
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000904:	4b3a      	ldr	r3, [pc, #232]	; (80009f0 <HAL_GPIO_Init+0x310>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	43db      	mvns	r3, r3
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4013      	ands	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800091c:	2b00      	cmp	r3, #0
 800091e:	d003      	beq.n	8000928 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4313      	orrs	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000928:	4a31      	ldr	r2, [pc, #196]	; (80009f0 <HAL_GPIO_Init+0x310>)
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <HAL_GPIO_Init+0x310>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	43db      	mvns	r3, r3
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4013      	ands	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4313      	orrs	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000952:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <HAL_GPIO_Init+0x310>)
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <HAL_GPIO_Init+0x310>)
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	43db      	mvns	r3, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4013      	ands	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d003      	beq.n	800097c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4313      	orrs	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <HAL_GPIO_Init+0x310>)
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <HAL_GPIO_Init+0x310>)
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	43db      	mvns	r3, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <HAL_GPIO_Init+0x310>)
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	3301      	adds	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	fa22 f303 	lsr.w	r3, r2, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	f47f ae97 	bne.w	80006f0 <HAL_GPIO_Init+0x10>
  }
}
 80009c2:	bf00      	nop
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010000 	.word	0x40010000
 80009d8:	48000400 	.word	0x48000400
 80009dc:	48000800 	.word	0x48000800
 80009e0:	48000c00 	.word	0x48000c00
 80009e4:	48001000 	.word	0x48001000
 80009e8:	48001400 	.word	0x48001400
 80009ec:	48001800 	.word	0x48001800
 80009f0:	40010400 	.word	0x40010400

080009f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	807b      	strh	r3, [r7, #2]
 8000a00:	4613      	mov	r3, r2
 8000a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a04:	787b      	ldrb	r3, [r7, #1]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a0a:	887a      	ldrh	r2, [r7, #2]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a10:	e002      	b.n	8000a18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a12:	887a      	ldrh	r2, [r7, #2]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	695a      	ldr	r2, [r3, #20]
 8000a34:	887b      	ldrh	r3, [r7, #2]
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d004      	beq.n	8000a46 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000a3c:	887b      	ldrh	r3, [r7, #2]
 8000a3e:	041a      	lsls	r2, r3, #16
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000a44:	e002      	b.n	8000a4c <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a46:	887a      	ldrh	r2, [r7, #2]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	619a      	str	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	f000 bf01 	b.w	8001874 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f000 8160 	beq.w	8000d42 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a82:	4bae      	ldr	r3, [pc, #696]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 030c 	and.w	r3, r3, #12
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	d00c      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a8e:	4bab      	ldr	r3, [pc, #684]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 030c 	and.w	r3, r3, #12
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	d159      	bne.n	8000b4e <HAL_RCC_OscConfig+0xf6>
 8000a9a:	4ba8      	ldr	r3, [pc, #672]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aa6:	d152      	bne.n	8000b4e <HAL_RCC_OscConfig+0xf6>
 8000aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000ab4:	fa93 f3a3 	rbit	r3, r3
 8000ab8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000abc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac0:	fab3 f383 	clz	r3, r3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d102      	bne.n	8000ada <HAL_RCC_OscConfig+0x82>
 8000ad4:	4b99      	ldr	r3, [pc, #612]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	e015      	b.n	8000b06 <HAL_RCC_OscConfig+0xae>
 8000ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ade:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000ae6:	fa93 f3a3 	rbit	r3, r3
 8000aea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000aee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000af2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000af6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000afa:	fa93 f3a3 	rbit	r3, r3
 8000afe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b02:	4b8e      	ldr	r3, [pc, #568]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b0a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000b0e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000b12:	fa92 f2a2 	rbit	r2, r2
 8000b16:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000b1a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	f042 0220 	orr.w	r2, r2, #32
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	f002 021f 	and.w	r2, r2, #31
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f202 	lsl.w	r2, r1, r2
 8000b34:	4013      	ands	r3, r2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 8102 	beq.w	8000d40 <HAL_RCC_OscConfig+0x2e8>
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f040 80fc 	bne.w	8000d40 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f000 be93 	b.w	8001874 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b58:	d106      	bne.n	8000b68 <HAL_RCC_OscConfig+0x110>
 8000b5a:	4b78      	ldr	r3, [pc, #480]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a77      	ldr	r2, [pc, #476]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e030      	b.n	8000bca <HAL_RCC_OscConfig+0x172>
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d10c      	bne.n	8000b8c <HAL_RCC_OscConfig+0x134>
 8000b72:	4b72      	ldr	r3, [pc, #456]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a71      	ldr	r2, [pc, #452]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	4b6f      	ldr	r3, [pc, #444]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a6e      	ldr	r2, [pc, #440]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	e01e      	b.n	8000bca <HAL_RCC_OscConfig+0x172>
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b96:	d10c      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x15a>
 8000b98:	4b68      	ldr	r3, [pc, #416]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a67      	ldr	r2, [pc, #412]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	4b65      	ldr	r3, [pc, #404]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a64      	ldr	r2, [pc, #400]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	e00b      	b.n	8000bca <HAL_RCC_OscConfig+0x172>
 8000bb2:	4b62      	ldr	r3, [pc, #392]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a61      	ldr	r2, [pc, #388]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	4b5f      	ldr	r3, [pc, #380]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a5e      	ldr	r2, [pc, #376]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d059      	beq.n	8000c88 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd4:	f7ff fc70 	bl	80004b8 <HAL_GetTick>
 8000bd8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bdc:	e00a      	b.n	8000bf4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bde:	f7ff fc6b 	bl	80004b8 <HAL_GetTick>
 8000be2:	4602      	mov	r2, r0
 8000be4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b64      	cmp	r3, #100	; 0x64
 8000bec:	d902      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	f000 be40 	b.w	8001874 <HAL_RCC_OscConfig+0xe1c>
 8000bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bf8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000c00:	fa93 f3a3 	rbit	r3, r3
 8000c04:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000c08:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0c:	fab3 f383 	clz	r3, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d102      	bne.n	8000c26 <HAL_RCC_OscConfig+0x1ce>
 8000c20:	4b46      	ldr	r3, [pc, #280]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	e015      	b.n	8000c52 <HAL_RCC_OscConfig+0x1fa>
 8000c26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c2a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000c32:	fa93 f3a3 	rbit	r3, r3
 8000c36:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c3e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000c42:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000c46:	fa93 f3a3 	rbit	r3, r3
 8000c4a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000c4e:	4b3b      	ldr	r3, [pc, #236]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c56:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000c5a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000c5e:	fa92 f2a2 	rbit	r2, r2
 8000c62:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000c66:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	f042 0220 	orr.w	r2, r2, #32
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	f002 021f 	and.w	r2, r2, #31
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c80:	4013      	ands	r3, r2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0ab      	beq.n	8000bde <HAL_RCC_OscConfig+0x186>
 8000c86:	e05c      	b.n	8000d42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fc16 	bl	80004b8 <HAL_GetTick>
 8000c8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c90:	e00a      	b.n	8000ca8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c92:	f7ff fc11 	bl	80004b8 <HAL_GetTick>
 8000c96:	4602      	mov	r2, r0
 8000c98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b64      	cmp	r3, #100	; 0x64
 8000ca0:	d902      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	f000 bde6 	b.w	8001874 <HAL_RCC_OscConfig+0xe1c>
 8000ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cac:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000cb4:	fa93 f3a3 	rbit	r3, r3
 8000cb8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000cbc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc0:	fab3 f383 	clz	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d102      	bne.n	8000cda <HAL_RCC_OscConfig+0x282>
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	e015      	b.n	8000d06 <HAL_RCC_OscConfig+0x2ae>
 8000cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cde:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000ce6:	fa93 f3a3 	rbit	r3, r3
 8000cea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000cf6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000cfa:	fa93 f3a3 	rbit	r3, r3
 8000cfe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d0a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000d0e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000d12:	fa92 f2a2 	rbit	r2, r2
 8000d16:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000d1a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000d1e:	fab2 f282 	clz	r2, r2
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	f042 0220 	orr.w	r2, r2, #32
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	f002 021f 	and.w	r2, r2, #31
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	4013      	ands	r3, r2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1ab      	bne.n	8000c92 <HAL_RCC_OscConfig+0x23a>
 8000d3a:	e002      	b.n	8000d42 <HAL_RCC_OscConfig+0x2ea>
 8000d3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 8170 	beq.w	8001032 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d52:	4bd0      	ldr	r3, [pc, #832]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 030c 	and.w	r3, r3, #12
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00c      	beq.n	8000d78 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d5e:	4bcd      	ldr	r3, [pc, #820]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b08      	cmp	r3, #8
 8000d68:	d16d      	bne.n	8000e46 <HAL_RCC_OscConfig+0x3ee>
 8000d6a:	4bca      	ldr	r3, [pc, #808]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d76:	d166      	bne.n	8000e46 <HAL_RCC_OscConfig+0x3ee>
 8000d78:	2302      	movs	r3, #2
 8000d7a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000d82:	fa93 f3a3 	rbit	r3, r3
 8000d86:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000d8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8e:	fab3 f383 	clz	r3, r3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	095b      	lsrs	r3, r3, #5
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d102      	bne.n	8000da8 <HAL_RCC_OscConfig+0x350>
 8000da2:	4bbc      	ldr	r3, [pc, #752]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	e013      	b.n	8000dd0 <HAL_RCC_OscConfig+0x378>
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000db2:	fa93 f3a3 	rbit	r3, r3
 8000db6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000dba:	2302      	movs	r3, #2
 8000dbc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000dc0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000dc4:	fa93 f3a3 	rbit	r3, r3
 8000dc8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000dcc:	4bb1      	ldr	r3, [pc, #708]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000dd6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000dda:	fa92 f2a2 	rbit	r2, r2
 8000dde:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000de2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000de6:	fab2 f282 	clz	r2, r2
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	f042 0220 	orr.w	r2, r2, #32
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	f002 021f 	and.w	r2, r2, #31
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d007      	beq.n	8000e12 <HAL_RCC_OscConfig+0x3ba>
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d002      	beq.n	8000e12 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f000 bd31 	b.w	8001874 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e12:	4ba0      	ldr	r3, [pc, #640]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	21f8      	movs	r1, #248	; 0xf8
 8000e22:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e26:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000e2a:	fa91 f1a1 	rbit	r1, r1
 8000e2e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000e32:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000e36:	fab1 f181 	clz	r1, r1
 8000e3a:	b2c9      	uxtb	r1, r1
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	4995      	ldr	r1, [pc, #596]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e44:	e0f5      	b.n	8001032 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 8085 	beq.w	8000f5c <HAL_RCC_OscConfig+0x504>
 8000e52:	2301      	movs	r3, #1
 8000e54:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e58:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000e5c:	fa93 f3a3 	rbit	r3, r3
 8000e60:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000e64:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e68:	fab3 f383 	clz	r3, r3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fb1b 	bl	80004b8 <HAL_GetTick>
 8000e82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e86:	e00a      	b.n	8000e9e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e88:	f7ff fb16 	bl	80004b8 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d902      	bls.n	8000e9e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	f000 bceb 	b.w	8001874 <HAL_RCC_OscConfig+0xe1c>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000ea8:	fa93 f3a3 	rbit	r3, r3
 8000eac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000eb0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb4:	fab3 f383 	clz	r3, r3
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d102      	bne.n	8000ece <HAL_RCC_OscConfig+0x476>
 8000ec8:	4b72      	ldr	r3, [pc, #456]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	e013      	b.n	8000ef6 <HAL_RCC_OscConfig+0x49e>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000ed8:	fa93 f3a3 	rbit	r3, r3
 8000edc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000ee6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000eea:	fa93 f3a3 	rbit	r3, r3
 8000eee:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000ef2:	4b68      	ldr	r3, [pc, #416]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000efc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000f00:	fa92 f2a2 	rbit	r2, r2
 8000f04:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000f08:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f0c:	fab2 f282 	clz	r2, r2
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	f042 0220 	orr.w	r2, r2, #32
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	f002 021f 	and.w	r2, r2, #31
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0af      	beq.n	8000e88 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f28:	4b5a      	ldr	r3, [pc, #360]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	21f8      	movs	r1, #248	; 0xf8
 8000f38:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8000f40:	fa91 f1a1 	rbit	r1, r1
 8000f44:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8000f48:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000f4c:	fab1 f181 	clz	r1, r1
 8000f50:	b2c9      	uxtb	r1, r1
 8000f52:	408b      	lsls	r3, r1
 8000f54:	494f      	ldr	r1, [pc, #316]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	600b      	str	r3, [r1, #0]
 8000f5a:	e06a      	b.n	8001032 <HAL_RCC_OscConfig+0x5da>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f62:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8000f6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f72:	fab3 f383 	clz	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	461a      	mov	r2, r3
 8000f84:	2300      	movs	r3, #0
 8000f86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f88:	f7ff fa96 	bl	80004b8 <HAL_GetTick>
 8000f8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f90:	e00a      	b.n	8000fa8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f92:	f7ff fa91 	bl	80004b8 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d902      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	f000 bc66 	b.w	8001874 <HAL_RCC_OscConfig+0xe1c>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8000fba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbe:	fab3 f383 	clz	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	095b      	lsrs	r3, r3, #5
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d102      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x580>
 8000fd2:	4b30      	ldr	r3, [pc, #192]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	e013      	b.n	8001000 <HAL_RCC_OscConfig+0x5a8>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fe2:	fa93 f3a3 	rbit	r3, r3
 8000fe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000ff0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ff4:	fa93 f3a3 	rbit	r3, r3
 8000ff8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <HAL_RCC_OscConfig+0x63c>)
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	2202      	movs	r2, #2
 8001002:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001006:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800100a:	fa92 f2a2 	rbit	r2, r2
 800100e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001012:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001016:	fab2 f282 	clz	r2, r2
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	f042 0220 	orr.w	r2, r2, #32
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	f002 021f 	and.w	r2, r2, #31
 8001026:	2101      	movs	r1, #1
 8001028:	fa01 f202 	lsl.w	r2, r1, r2
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1af      	bne.n	8000f92 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80da 	beq.w	80011f6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d069      	beq.n	8001120 <HAL_RCC_OscConfig+0x6c8>
 800104c:	2301      	movs	r3, #1
 800104e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001056:	fa93 f3a3 	rbit	r3, r3
 800105a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800105e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001062:	fab3 f383 	clz	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_RCC_OscConfig+0x640>)
 800106c:	4413      	add	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	461a      	mov	r2, r3
 8001072:	2301      	movs	r3, #1
 8001074:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fa1f 	bl	80004b8 <HAL_GetTick>
 800107a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107e:	e00d      	b.n	800109c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001080:	f7ff fa1a 	bl	80004b8 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d905      	bls.n	800109c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e3ef      	b.n	8001874 <HAL_RCC_OscConfig+0xe1c>
 8001094:	40021000 	.word	0x40021000
 8001098:	10908120 	.word	0x10908120
 800109c:	2302      	movs	r3, #2
 800109e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010a6:	fa93 f2a3 	rbit	r2, r3
 80010aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80010b4:	2202      	movs	r2, #2
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	fa93 f2a3 	rbit	r2, r3
 80010c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010cc:	2202      	movs	r2, #2
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	fa93 f2a3 	rbit	r2, r3
 80010da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80010de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e0:	4ba4      	ldr	r3, [pc, #656]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80010e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80010e8:	2102      	movs	r1, #2
 80010ea:	6019      	str	r1, [r3, #0]
 80010ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	fa93 f1a3 	rbit	r1, r3
 80010f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80010fa:	6019      	str	r1, [r3, #0]
  return result;
 80010fc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	fab3 f383 	clz	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 031f 	and.w	r3, r3, #31
 8001112:	2101      	movs	r1, #1
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	4013      	ands	r3, r2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0b0      	beq.n	8001080 <HAL_RCC_OscConfig+0x628>
 800111e:	e06a      	b.n	80011f6 <HAL_RCC_OscConfig+0x79e>
 8001120:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	fa93 f2a3 	rbit	r2, r3
 8001132:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001136:	601a      	str	r2, [r3, #0]
  return result;
 8001138:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800113c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800113e:	fab3 f383 	clz	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	4b8c      	ldr	r3, [pc, #560]	; (8001378 <HAL_RCC_OscConfig+0x920>)
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	461a      	mov	r2, r3
 800114e:	2300      	movs	r3, #0
 8001150:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001152:	f7ff f9b1 	bl	80004b8 <HAL_GetTick>
 8001156:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115a:	e009      	b.n	8001170 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800115c:	f7ff f9ac 	bl	80004b8 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e381      	b.n	8001874 <HAL_RCC_OscConfig+0xe1c>
 8001170:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001174:	2202      	movs	r2, #2
 8001176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	fa93 f2a3 	rbit	r2, r3
 8001182:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800118c:	2202      	movs	r2, #2
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	fa93 f2a3 	rbit	r2, r3
 800119a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011a4:	2202      	movs	r2, #2
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	fa93 f2a3 	rbit	r2, r3
 80011b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80011b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b8:	4b6e      	ldr	r3, [pc, #440]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80011ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011c0:	2102      	movs	r1, #2
 80011c2:	6019      	str	r1, [r3, #0]
 80011c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	fa93 f1a3 	rbit	r1, r3
 80011ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80011d2:	6019      	str	r1, [r3, #0]
  return result;
 80011d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1b2      	bne.n	800115c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 8157 	beq.w	80014b4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120c:	4b59      	ldr	r3, [pc, #356]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d112      	bne.n	800123e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	4b56      	ldr	r3, [pc, #344]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	4a55      	ldr	r2, [pc, #340]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 800121e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001222:	61d3      	str	r3, [r2, #28]
 8001224:	4b53      	ldr	r3, [pc, #332]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001238:	2301      	movs	r3, #1
 800123a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123e:	4b4f      	ldr	r3, [pc, #316]	; (800137c <HAL_RCC_OscConfig+0x924>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001246:	2b00      	cmp	r3, #0
 8001248:	d11a      	bne.n	8001280 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800124a:	4b4c      	ldr	r3, [pc, #304]	; (800137c <HAL_RCC_OscConfig+0x924>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a4b      	ldr	r2, [pc, #300]	; (800137c <HAL_RCC_OscConfig+0x924>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001254:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001256:	f7ff f92f 	bl	80004b8 <HAL_GetTick>
 800125a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125e:	e009      	b.n	8001274 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001260:	f7ff f92a 	bl	80004b8 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b64      	cmp	r3, #100	; 0x64
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e2ff      	b.n	8001874 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001274:	4b41      	ldr	r3, [pc, #260]	; (800137c <HAL_RCC_OscConfig+0x924>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0ef      	beq.n	8001260 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d106      	bne.n	8001298 <HAL_RCC_OscConfig+0x840>
 800128a:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a39      	ldr	r2, [pc, #228]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6213      	str	r3, [r2, #32]
 8001296:	e02f      	b.n	80012f8 <HAL_RCC_OscConfig+0x8a0>
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0x864>
 80012a2:	4b34      	ldr	r3, [pc, #208]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4a33      	ldr	r2, [pc, #204]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6213      	str	r3, [r2, #32]
 80012ae:	4b31      	ldr	r3, [pc, #196]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4a30      	ldr	r2, [pc, #192]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80012b4:	f023 0304 	bic.w	r3, r3, #4
 80012b8:	6213      	str	r3, [r2, #32]
 80012ba:	e01d      	b.n	80012f8 <HAL_RCC_OscConfig+0x8a0>
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x888>
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4a2a      	ldr	r2, [pc, #168]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6213      	str	r3, [r2, #32]
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4a27      	ldr	r2, [pc, #156]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6213      	str	r3, [r2, #32]
 80012de:	e00b      	b.n	80012f8 <HAL_RCC_OscConfig+0x8a0>
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4a23      	ldr	r2, [pc, #140]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	6213      	str	r3, [r2, #32]
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4a20      	ldr	r2, [pc, #128]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 80012f2:	f023 0304 	bic.w	r3, r3, #4
 80012f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d06a      	beq.n	80013d8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001302:	f7ff f8d9 	bl	80004b8 <HAL_GetTick>
 8001306:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800130c:	f7ff f8d4 	bl	80004b8 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e2a7      	b.n	8001874 <HAL_RCC_OscConfig+0xe1c>
 8001324:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001328:	2202      	movs	r2, #2
 800132a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	fa93 f2a3 	rbit	r2, r3
 8001336:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001340:	2202      	movs	r2, #2
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	fa93 f2a3 	rbit	r2, r3
 800134e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001352:	601a      	str	r2, [r3, #0]
  return result;
 8001354:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001358:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135a:	fab3 f383 	clz	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	095b      	lsrs	r3, r3, #5
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d108      	bne.n	8001380 <HAL_RCC_OscConfig+0x928>
 800136e:	4b01      	ldr	r3, [pc, #4]	; (8001374 <HAL_RCC_OscConfig+0x91c>)
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	e013      	b.n	800139c <HAL_RCC_OscConfig+0x944>
 8001374:	40021000 	.word	0x40021000
 8001378:	10908120 	.word	0x10908120
 800137c:	40007000 	.word	0x40007000
 8001380:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001384:	2202      	movs	r2, #2
 8001386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	fa93 f2a3 	rbit	r2, r3
 8001392:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	4bc0      	ldr	r3, [pc, #768]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80013a0:	2102      	movs	r1, #2
 80013a2:	6011      	str	r1, [r2, #0]
 80013a4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	fa92 f1a2 	rbit	r1, r2
 80013ae:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80013b2:	6011      	str	r1, [r2, #0]
  return result;
 80013b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	fab2 f282 	clz	r2, r2
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	f002 021f 	and.w	r2, r2, #31
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f202 	lsl.w	r2, r1, r2
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d09a      	beq.n	800130c <HAL_RCC_OscConfig+0x8b4>
 80013d6:	e063      	b.n	80014a0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff f86e 	bl	80004b8 <HAL_GetTick>
 80013dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e0:	e00b      	b.n	80013fa <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e2:	f7ff f869 	bl	80004b8 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e23c      	b.n	8001874 <HAL_RCC_OscConfig+0xe1c>
 80013fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013fe:	2202      	movs	r2, #2
 8001400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	fa93 f2a3 	rbit	r2, r3
 800140c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001416:	2202      	movs	r2, #2
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	fa93 f2a3 	rbit	r2, r3
 8001424:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001428:	601a      	str	r2, [r3, #0]
  return result;
 800142a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800142e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d102      	bne.n	800144a <HAL_RCC_OscConfig+0x9f2>
 8001444:	4b95      	ldr	r3, [pc, #596]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	e00d      	b.n	8001466 <HAL_RCC_OscConfig+0xa0e>
 800144a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800144e:	2202      	movs	r2, #2
 8001450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fa93 f2a3 	rbit	r2, r3
 800145c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	4b8e      	ldr	r3, [pc, #568]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001466:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800146a:	2102      	movs	r1, #2
 800146c:	6011      	str	r1, [r2, #0]
 800146e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	fa92 f1a2 	rbit	r1, r2
 8001478:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800147c:	6011      	str	r1, [r2, #0]
  return result;
 800147e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	fab2 f282 	clz	r2, r2
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	f002 021f 	and.w	r2, r2, #31
 8001494:	2101      	movs	r1, #1
 8001496:	fa01 f202 	lsl.w	r2, r1, r2
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1a0      	bne.n	80013e2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014a0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a8:	4b7c      	ldr	r3, [pc, #496]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	4a7b      	ldr	r2, [pc, #492]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 80014ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 81d9 	beq.w	8001872 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c0:	4b76      	ldr	r3, [pc, #472]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	f000 81a6 	beq.w	800181a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	f040 811e 	bne.w	8001716 <HAL_RCC_OscConfig+0xcbe>
 80014da:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014f2:	601a      	str	r2, [r3, #0]
  return result;
 80014f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001504:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	461a      	mov	r2, r3
 800150c:	2300      	movs	r3, #0
 800150e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7fe ffd2 	bl	80004b8 <HAL_GetTick>
 8001514:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001518:	e009      	b.n	800152e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151a:	f7fe ffcd 	bl	80004b8 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1a2      	b.n	8001874 <HAL_RCC_OscConfig+0xe1c>
 800152e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	fa93 f2a3 	rbit	r2, r3
 8001542:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001546:	601a      	str	r2, [r3, #0]
  return result;
 8001548:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800154c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	095b      	lsrs	r3, r3, #5
 8001556:	b2db      	uxtb	r3, r3
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b01      	cmp	r3, #1
 8001560:	d102      	bne.n	8001568 <HAL_RCC_OscConfig+0xb10>
 8001562:	4b4e      	ldr	r3, [pc, #312]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	e01b      	b.n	80015a0 <HAL_RCC_OscConfig+0xb48>
 8001568:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800156c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	fa93 f2a3 	rbit	r2, r3
 800157c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001586:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	fa93 f2a3 	rbit	r2, r3
 8001596:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80015a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015a8:	6011      	str	r1, [r2, #0]
 80015aa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	fa92 f1a2 	rbit	r1, r2
 80015b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015b8:	6011      	str	r1, [r2, #0]
  return result;
 80015ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	fab2 f282 	clz	r2, r2
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	f042 0220 	orr.w	r2, r2, #32
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	f002 021f 	and.w	r2, r2, #31
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f202 	lsl.w	r2, r1, r2
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d19e      	bne.n	800151a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015dc:	4b2f      	ldr	r3, [pc, #188]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	f023 020f 	bic.w	r2, r3, #15
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	492c      	ldr	r1, [pc, #176]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6a19      	ldr	r1, [r3, #32]
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	430b      	orrs	r3, r1
 8001606:	4925      	ldr	r1, [pc, #148]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
 800160c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	fa93 f2a3 	rbit	r2, r3
 8001620:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001624:	601a      	str	r2, [r3, #0]
  return result;
 8001626:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800162a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001636:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	461a      	mov	r2, r3
 800163e:	2301      	movs	r3, #1
 8001640:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7fe ff39 	bl	80004b8 <HAL_GetTick>
 8001646:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800164a:	e009      	b.n	8001660 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7fe ff34 	bl	80004b8 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e109      	b.n	8001874 <HAL_RCC_OscConfig+0xe1c>
 8001660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001664:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	fa93 f2a3 	rbit	r2, r3
 8001674:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001678:	601a      	str	r2, [r3, #0]
  return result;
 800167a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800167e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <HAL_RCC_OscConfig+0xc48>
 8001694:	4b01      	ldr	r3, [pc, #4]	; (800169c <HAL_RCC_OscConfig+0xc44>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	e01e      	b.n	80016d8 <HAL_RCC_OscConfig+0xc80>
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000
 80016a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	fa93 f2a3 	rbit	r2, r3
 80016b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f2a3 	rbit	r2, r3
 80016ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0xe28>)
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80016dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016e0:	6011      	str	r1, [r2, #0]
 80016e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	fa92 f1a2 	rbit	r1, r2
 80016ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016f0:	6011      	str	r1, [r2, #0]
  return result;
 80016f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	fab2 f282 	clz	r2, r2
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	f042 0220 	orr.w	r2, r2, #32
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	f002 021f 	and.w	r2, r2, #31
 8001708:	2101      	movs	r1, #1
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d09b      	beq.n	800164c <HAL_RCC_OscConfig+0xbf4>
 8001714:	e0ad      	b.n	8001872 <HAL_RCC_OscConfig+0xe1a>
 8001716:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800171a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800171e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	fa93 f2a3 	rbit	r2, r3
 800172a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800172e:	601a      	str	r2, [r3, #0]
  return result;
 8001730:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001734:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	fab3 f383 	clz	r3, r3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001740:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	461a      	mov	r2, r3
 8001748:	2300      	movs	r3, #0
 800174a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7fe feb4 	bl	80004b8 <HAL_GetTick>
 8001750:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001754:	e009      	b.n	800176a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001756:	f7fe feaf 	bl	80004b8 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e084      	b.n	8001874 <HAL_RCC_OscConfig+0xe1c>
 800176a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	fa93 f2a3 	rbit	r2, r3
 800177e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001782:	601a      	str	r2, [r3, #0]
  return result;
 8001784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001788:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	fab3 f383 	clz	r3, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	095b      	lsrs	r3, r3, #5
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d102      	bne.n	80017a4 <HAL_RCC_OscConfig+0xd4c>
 800179e:	4b38      	ldr	r3, [pc, #224]	; (8001880 <HAL_RCC_OscConfig+0xe28>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	e01b      	b.n	80017dc <HAL_RCC_OscConfig+0xd84>
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fa93 f2a3 	rbit	r2, r3
 80017b8:	f107 0320 	add.w	r3, r7, #32
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fa93 f2a3 	rbit	r2, r3
 80017d2:	f107 0318 	add.w	r3, r7, #24
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <HAL_RCC_OscConfig+0xe28>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	f107 0214 	add.w	r2, r7, #20
 80017e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017e4:	6011      	str	r1, [r2, #0]
 80017e6:	f107 0214 	add.w	r2, r7, #20
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	fa92 f1a2 	rbit	r1, r2
 80017f0:	f107 0210 	add.w	r2, r7, #16
 80017f4:	6011      	str	r1, [r2, #0]
  return result;
 80017f6:	f107 0210 	add.w	r2, r7, #16
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	fab2 f282 	clz	r2, r2
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	f042 0220 	orr.w	r2, r2, #32
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	f002 021f 	and.w	r2, r2, #31
 800180c:	2101      	movs	r1, #1
 800180e:	fa01 f202 	lsl.w	r2, r1, r2
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d19e      	bne.n	8001756 <HAL_RCC_OscConfig+0xcfe>
 8001818:	e02b      	b.n	8001872 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e025      	b.n	8001874 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_RCC_OscConfig+0xe28>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_RCC_OscConfig+0xe28>)
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001838:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800183c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	429a      	cmp	r2, r3
 8001848:	d111      	bne.n	800186e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800184a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800184e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001858:	429a      	cmp	r2, r3
 800185a:	d108      	bne.n	800186e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800185c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001860:	f003 020f 	and.w	r2, r3, #15
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800186a:	429a      	cmp	r2, r3
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b09e      	sub	sp, #120	; 0x78
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e162      	b.n	8001b62 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b90      	ldr	r3, [pc, #576]	; (8001ae0 <HAL_RCC_ClockConfig+0x25c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d910      	bls.n	80018cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b8d      	ldr	r3, [pc, #564]	; (8001ae0 <HAL_RCC_ClockConfig+0x25c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 0207 	bic.w	r2, r3, #7
 80018b2:	498b      	ldr	r1, [pc, #556]	; (8001ae0 <HAL_RCC_ClockConfig+0x25c>)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b89      	ldr	r3, [pc, #548]	; (8001ae0 <HAL_RCC_ClockConfig+0x25c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e14a      	b.n	8001b62 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d8:	4b82      	ldr	r3, [pc, #520]	; (8001ae4 <HAL_RCC_ClockConfig+0x260>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	497f      	ldr	r1, [pc, #508]	; (8001ae4 <HAL_RCC_ClockConfig+0x260>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80dc 	beq.w	8001ab0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d13c      	bne.n	800197a <HAL_RCC_ClockConfig+0xf6>
 8001900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001904:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800190e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d102      	bne.n	800192a <HAL_RCC_ClockConfig+0xa6>
 8001924:	4b6f      	ldr	r3, [pc, #444]	; (8001ae4 <HAL_RCC_ClockConfig+0x260>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	e00f      	b.n	800194a <HAL_RCC_ClockConfig+0xc6>
 800192a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800192e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	667b      	str	r3, [r7, #100]	; 0x64
 8001938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193c:	663b      	str	r3, [r7, #96]	; 0x60
 800193e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001946:	4b67      	ldr	r3, [pc, #412]	; (8001ae4 <HAL_RCC_ClockConfig+0x260>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800194e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001952:	fa92 f2a2 	rbit	r2, r2
 8001956:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001958:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800195a:	fab2 f282 	clz	r2, r2
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	f042 0220 	orr.w	r2, r2, #32
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f002 021f 	and.w	r2, r2, #31
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f202 	lsl.w	r2, r1, r2
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d17b      	bne.n	8001a6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0f3      	b.n	8001b62 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d13c      	bne.n	80019fc <HAL_RCC_ClockConfig+0x178>
 8001982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001986:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	095b      	lsrs	r3, r3, #5
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d102      	bne.n	80019ac <HAL_RCC_ClockConfig+0x128>
 80019a6:	4b4f      	ldr	r3, [pc, #316]	; (8001ae4 <HAL_RCC_ClockConfig+0x260>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	e00f      	b.n	80019cc <HAL_RCC_ClockConfig+0x148>
 80019ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	647b      	str	r3, [r7, #68]	; 0x44
 80019ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019be:	643b      	str	r3, [r7, #64]	; 0x40
 80019c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019c8:	4b46      	ldr	r3, [pc, #280]	; (8001ae4 <HAL_RCC_ClockConfig+0x260>)
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80019d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019d4:	fa92 f2a2 	rbit	r2, r2
 80019d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80019da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019dc:	fab2 f282 	clz	r2, r2
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	f042 0220 	orr.w	r2, r2, #32
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	f002 021f 	and.w	r2, r2, #31
 80019ec:	2101      	movs	r1, #1
 80019ee:	fa01 f202 	lsl.w	r2, r1, r2
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d13a      	bne.n	8001a6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0b2      	b.n	8001b62 <HAL_RCC_ClockConfig+0x2de>
 80019fc:	2302      	movs	r3, #2
 80019fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a02:	fa93 f3a3 	rbit	r3, r3
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d102      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x1a0>
 8001a1e:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <HAL_RCC_ClockConfig+0x260>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	e00d      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1bc>
 8001a24:	2302      	movs	r3, #2
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a30:	2302      	movs	r3, #2
 8001a32:	623b      	str	r3, [r7, #32]
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_RCC_ClockConfig+0x260>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	2202      	movs	r2, #2
 8001a42:	61ba      	str	r2, [r7, #24]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	fa92 f2a2 	rbit	r2, r2
 8001a4a:	617a      	str	r2, [r7, #20]
  return result;
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	fab2 f282 	clz	r2, r2
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	f042 0220 	orr.w	r2, r2, #32
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	f002 021f 	and.w	r2, r2, #31
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e079      	b.n	8001b62 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_RCC_ClockConfig+0x260>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f023 0203 	bic.w	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	491a      	ldr	r1, [pc, #104]	; (8001ae4 <HAL_RCC_ClockConfig+0x260>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a80:	f7fe fd1a 	bl	80004b8 <HAL_GetTick>
 8001a84:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7fe fd16 	bl	80004b8 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e061      	b.n	8001b62 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_RCC_ClockConfig+0x260>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 020c 	and.w	r2, r3, #12
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1eb      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_ClockConfig+0x25c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d214      	bcs.n	8001ae8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_RCC_ClockConfig+0x25c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 0207 	bic.w	r2, r3, #7
 8001ac6:	4906      	ldr	r1, [pc, #24]	; (8001ae0 <HAL_RCC_ClockConfig+0x25c>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <HAL_RCC_ClockConfig+0x25c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e040      	b.n	8001b62 <HAL_RCC_ClockConfig+0x2de>
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_RCC_ClockConfig+0x2e8>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	491a      	ldr	r1, [pc, #104]	; (8001b6c <HAL_RCC_ClockConfig+0x2e8>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_RCC_ClockConfig+0x2e8>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4912      	ldr	r1, [pc, #72]	; (8001b6c <HAL_RCC_ClockConfig+0x2e8>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b26:	f000 f829 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_RCC_ClockConfig+0x2e8>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b34:	22f0      	movs	r2, #240	; 0xf0
 8001b36:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	fa92 f2a2 	rbit	r2, r2
 8001b3e:	60fa      	str	r2, [r7, #12]
  return result;
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	fab2 f282 	clz	r2, r2
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	40d3      	lsrs	r3, r2
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x2ec>)
 8001b4c:	5cd3      	ldrb	r3, [r2, r3]
 8001b4e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b52:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <HAL_RCC_ClockConfig+0x2f0>)
 8001b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_RCC_ClockConfig+0x2f4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fc68 	bl	8000430 <HAL_InitTick>
  
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3778      	adds	r7, #120	; 0x78
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08001cc0 	.word	0x08001cc0
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b08b      	sub	sp, #44	; 0x2c
 8001b80:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001b96:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d002      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x30>
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x36>
 8001baa:	e03f      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bae:	623b      	str	r3, [r7, #32]
      break;
 8001bb0:	e03f      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001bb8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001bbc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	fa92 f2a2 	rbit	r2, r2
 8001bc4:	607a      	str	r2, [r7, #4]
  return result;
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	fab2 f282 	clz	r2, r2
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	40d3      	lsrs	r3, r2
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	220f      	movs	r2, #15
 8001be0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	fa92 f2a2 	rbit	r2, r2
 8001be8:	60fa      	str	r2, [r7, #12]
  return result;
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	fab2 f282 	clz	r2, r2
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	40d3      	lsrs	r3, r2
 8001bf4:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c04:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
 8001c14:	e007      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c16:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	623b      	str	r3, [r7, #32]
      break;
 8001c2a:	e002      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c2e:	623b      	str	r3, [r7, #32]
      break;
 8001c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c32:	6a3b      	ldr	r3, [r7, #32]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	372c      	adds	r7, #44	; 0x2c
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40021000 	.word	0x40021000
 8001c44:	007a1200 	.word	0x007a1200
 8001c48:	08001cd0 	.word	0x08001cd0
 8001c4c:	08001ce0 	.word	0x08001ce0

08001c50 <__libc_init_array>:
 8001c50:	b570      	push	{r4, r5, r6, lr}
 8001c52:	4e0d      	ldr	r6, [pc, #52]	; (8001c88 <__libc_init_array+0x38>)
 8001c54:	4c0d      	ldr	r4, [pc, #52]	; (8001c8c <__libc_init_array+0x3c>)
 8001c56:	1ba4      	subs	r4, r4, r6
 8001c58:	10a4      	asrs	r4, r4, #2
 8001c5a:	2500      	movs	r5, #0
 8001c5c:	42a5      	cmp	r5, r4
 8001c5e:	d109      	bne.n	8001c74 <__libc_init_array+0x24>
 8001c60:	4e0b      	ldr	r6, [pc, #44]	; (8001c90 <__libc_init_array+0x40>)
 8001c62:	4c0c      	ldr	r4, [pc, #48]	; (8001c94 <__libc_init_array+0x44>)
 8001c64:	f000 f820 	bl	8001ca8 <_init>
 8001c68:	1ba4      	subs	r4, r4, r6
 8001c6a:	10a4      	asrs	r4, r4, #2
 8001c6c:	2500      	movs	r5, #0
 8001c6e:	42a5      	cmp	r5, r4
 8001c70:	d105      	bne.n	8001c7e <__libc_init_array+0x2e>
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
 8001c74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c78:	4798      	blx	r3
 8001c7a:	3501      	adds	r5, #1
 8001c7c:	e7ee      	b.n	8001c5c <__libc_init_array+0xc>
 8001c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c82:	4798      	blx	r3
 8001c84:	3501      	adds	r5, #1
 8001c86:	e7f2      	b.n	8001c6e <__libc_init_array+0x1e>
 8001c88:	08001cf0 	.word	0x08001cf0
 8001c8c:	08001cf0 	.word	0x08001cf0
 8001c90:	08001cf0 	.word	0x08001cf0
 8001c94:	08001cf4 	.word	0x08001cf4

08001c98 <memset>:
 8001c98:	4402      	add	r2, r0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d100      	bne.n	8001ca2 <memset+0xa>
 8001ca0:	4770      	bx	lr
 8001ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ca6:	e7f9      	b.n	8001c9c <memset+0x4>

08001ca8 <_init>:
 8001ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001caa:	bf00      	nop
 8001cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cae:	bc08      	pop	{r3}
 8001cb0:	469e      	mov	lr, r3
 8001cb2:	4770      	bx	lr

08001cb4 <_fini>:
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	bf00      	nop
 8001cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cba:	bc08      	pop	{r3}
 8001cbc:	469e      	mov	lr, r3
 8001cbe:	4770      	bx	lr
