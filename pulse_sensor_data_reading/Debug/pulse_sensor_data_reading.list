
pulse_sensor_data_reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd4  08004fd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004fd4  08004fd4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fd4  08004fd4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004144  20000070  0800504c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041b4  0800504c  000241b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b551  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b63  00000000  00000000  0002b5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0002d158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  0002dab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d6f8  00000000  00000000  0002e320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000093c2  00000000  00000000  0004ba18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0197  00000000  00000000  00054dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104f71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b0  00000000  00000000  00104fec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f48 	.word	0x08004f48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004f48 	.word	0x08004f48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fb29 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f845 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f961 	bl	8000564 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002a2:	f000 f8a1 	bl	80003e8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80002a6:	f000 f90f 	bl	80004c8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80002aa:	f000 f93d 	bl	8000528 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, g_pValues, ADC_BUFFER_LEN);
 80002ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002b2:	4919      	ldr	r1, [pc, #100]	; (8000318 <main+0x88>)
 80002b4:	4819      	ldr	r0, [pc, #100]	; (800031c <main+0x8c>)
 80002b6:	f000 ff9d 	bl	80011f4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char chMsg[10] = {0};
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	811a      	strh	r2, [r3, #8]
  uint32_t uiValue = 0, uiDigitVal = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
 80002c8:	2300      	movs	r3, #0
 80002ca:	613b      	str	r3, [r7, #16]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 80002cc:	4813      	ldr	r0, [pc, #76]	; (800031c <main+0x8c>)
 80002ce:	f000 fd81 	bl	8000dd4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002d2:	f04f 31ff 	mov.w	r1, #4294967295
 80002d6:	4811      	ldr	r0, [pc, #68]	; (800031c <main+0x8c>)
 80002d8:	f000 fe92 	bl	8001000 <HAL_ADC_PollForConversion>
	  uiValue = HAL_ADC_GetValue(&hadc1);
 80002dc:	480f      	ldr	r0, [pc, #60]	; (800031c <main+0x8c>)
 80002de:	f001 f8a5 	bl	800142c <HAL_ADC_GetValue>
 80002e2:	6178      	str	r0, [r7, #20]
	  uiDigitVal = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80002e4:	2102      	movs	r1, #2
 80002e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ea:	f002 f9fd 	bl	80026e8 <HAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	613b      	str	r3, [r7, #16]
	  sprintf(chMsg, "%u\n\r", uiValue);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	697a      	ldr	r2, [r7, #20]
 80002f6:	490a      	ldr	r1, [pc, #40]	; (8000320 <main+0x90>)
 80002f8:	4618      	mov	r0, r3
 80002fa:	f004 fa1f 	bl	800473c <siprintf>
	  HAL_UART_Transmit(&huart2, chMsg, strlen(chMsg), HAL_MAX_DELAY);
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff6d 	bl	80001e0 <strlen>
 8000306:	4603      	mov	r3, r0
 8000308:	b29a      	uxth	r2, r3
 800030a:	1d39      	adds	r1, r7, #4
 800030c:	f04f 33ff 	mov.w	r3, #4294967295
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <main+0x94>)
 8000312:	f003 fdd1 	bl	8003eb8 <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc1);
 8000316:	e7d9      	b.n	80002cc <main+0x3c>
 8000318:	2000008c 	.word	0x2000008c
 800031c:	20004098 	.word	0x20004098
 8000320:	08004f60 	.word	0x08004f60
 8000324:	2000412c 	.word	0x2000412c

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b0a6      	sub	sp, #152	; 0x98
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f004 f9f8 	bl	800472c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2258      	movs	r2, #88	; 0x58
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f004 f9ea 	bl	800472c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000358:	2302      	movs	r3, #2
 800035a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000360:	2310      	movs	r3, #16
 8000362:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	2302      	movs	r3, #2
 8000368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800036c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000374:	2300      	movs	r3, #0
 8000376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000384:	4618      	mov	r0, r3
 8000386:	f002 f9df 	bl	8002748 <HAL_RCC_OscConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000390:	f000 f932 	bl	80005f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000394:	230f      	movs	r3, #15
 8000396:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000398:	2300      	movs	r3, #0
 800039a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f003 f8e0 	bl	8003574 <HAL_RCC_ClockConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003ba:	f000 f91d 	bl	80005f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80003be:	2382      	movs	r3, #130	; 0x82
 80003c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4618      	mov	r0, r3
 80003d0:	f003 fb06 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003da:	f000 f90d 	bl	80005f8 <Error_Handler>
  }
}
 80003de:	bf00      	nop
 80003e0:	3798      	adds	r7, #152	; 0x98
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08a      	sub	sp, #40	; 0x28
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003ee:	f107 031c 	add.w	r3, r7, #28
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
 8000408:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800040a:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <MX_ADC1_Init+0xdc>)
 800040c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000410:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000412:	4b2c      	ldr	r3, [pc, #176]	; (80004c4 <MX_ADC1_Init+0xdc>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000418:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <MX_ADC1_Init+0xdc>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041e:	4b29      	ldr	r3, [pc, #164]	; (80004c4 <MX_ADC1_Init+0xdc>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000424:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <MX_ADC1_Init+0xdc>)
 8000426:	2201      	movs	r2, #1
 8000428:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800042a:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <MX_ADC1_Init+0xdc>)
 800042c:	2200      	movs	r2, #0
 800042e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000432:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <MX_ADC1_Init+0xdc>)
 8000434:	2200      	movs	r2, #0
 8000436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <MX_ADC1_Init+0xdc>)
 800043a:	2201      	movs	r2, #1
 800043c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800043e:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <MX_ADC1_Init+0xdc>)
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <MX_ADC1_Init+0xdc>)
 8000446:	2201      	movs	r2, #1
 8000448:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800044a:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <MX_ADC1_Init+0xdc>)
 800044c:	2201      	movs	r2, #1
 800044e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000452:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <MX_ADC1_Init+0xdc>)
 8000454:	2204      	movs	r2, #4
 8000456:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <MX_ADC1_Init+0xdc>)
 800045a:	2200      	movs	r2, #0
 800045c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800045e:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <MX_ADC1_Init+0xdc>)
 8000460:	2200      	movs	r2, #0
 8000462:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000464:	4817      	ldr	r0, [pc, #92]	; (80004c4 <MX_ADC1_Init+0xdc>)
 8000466:	f000 fabb 	bl	80009e0 <HAL_ADC_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000470:	f000 f8c2 	bl	80005f8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000474:	2300      	movs	r3, #0
 8000476:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000478:	f107 031c 	add.w	r3, r7, #28
 800047c:	4619      	mov	r1, r3
 800047e:	4811      	ldr	r0, [pc, #68]	; (80004c4 <MX_ADC1_Init+0xdc>)
 8000480:	f001 face 	bl	8001a20 <HAL_ADCEx_MultiModeConfigChannel>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800048a:	f000 f8b5 	bl	80005f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800048e:	2301      	movs	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000492:	2301      	movs	r3, #1
 8000494:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000496:	2300      	movs	r3, #0
 8000498:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4619      	mov	r1, r3
 80004aa:	4806      	ldr	r0, [pc, #24]	; (80004c4 <MX_ADC1_Init+0xdc>)
 80004ac:	f000 ffcc 	bl	8001448 <HAL_ADC_ConfigChannel>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004b6:	f000 f89f 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004ba:	bf00      	nop
 80004bc:	3728      	adds	r7, #40	; 0x28
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20004098 	.word	0x20004098

080004c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004ce:	4a15      	ldr	r2, [pc, #84]	; (8000524 <MX_USART2_UART_Init+0x5c>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_USART2_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_USART2_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_USART2_UART_Init+0x58>)
 800050c:	f003 fc86 	bl	8003e1c <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000516:	f000 f86f 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	2000412c 	.word	0x2000412c
 8000524:	40004400 	.word	0x40004400

08000528 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_DMA_Init+0x38>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <MX_DMA_Init+0x38>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_DMA_Init+0x38>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	200b      	movs	r0, #11
 800054c:	f001 fd59 	bl	8002002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000550:	200b      	movs	r0, #11
 8000552:	f001 fd72 	bl	800203a <HAL_NVIC_EnableIRQ>

}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_GPIO_Init+0x74>)
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	4a16      	ldr	r2, [pc, #88]	; (80005d8 <MX_GPIO_Init+0x74>)
 800057e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000582:	6153      	str	r3, [r2, #20]
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_GPIO_Init+0x74>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2120      	movs	r1, #32
 8000594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000598:	f002 f8be 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800059c:	2302      	movs	r3, #2
 800059e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f001 ff10 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005b4:	2320      	movs	r3, #32
 80005b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f001 ff02 	bl	80023d4 <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000

080005dc <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f002 f894 	bl	8002718 <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_MspInit+0x44>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <HAL_MspInit+0x44>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_MspInit+0x44>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_MspInit+0x44>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_MspInit+0x44>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_MspInit+0x44>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000670:	d14c      	bne.n	800070c <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <HAL_ADC_MspInit+0xc4>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a27      	ldr	r2, [pc, #156]	; (8000714 <HAL_ADC_MspInit+0xc4>)
 8000678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <HAL_ADC_MspInit+0xc4>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <HAL_ADC_MspInit+0xc4>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a21      	ldr	r2, [pc, #132]	; (8000714 <HAL_ADC_MspInit+0xc4>)
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	6153      	str	r3, [r2, #20]
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <HAL_ADC_MspInit+0xc4>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a2:	2301      	movs	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b8:	f001 fe8c 	bl	80023d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_ADC_MspInit+0xc8>)
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <HAL_ADC_MspInit+0xcc>)
 80006c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_ADC_MspInit+0xc8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <HAL_ADC_MspInit+0xc8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_ADC_MspInit+0xc8>)
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <HAL_ADC_MspInit+0xc8>)
 80006d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_ADC_MspInit+0xc8>)
 80006de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_ADC_MspInit+0xc8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <HAL_ADC_MspInit+0xc8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <HAL_ADC_MspInit+0xc8>)
 80006f2:	f001 fcbc 	bl	800206e <HAL_DMA_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80006fc:	f7ff ff7c 	bl	80005f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a05      	ldr	r2, [pc, #20]	; (8000718 <HAL_ADC_MspInit+0xc8>)
 8000704:	639a      	str	r2, [r3, #56]	; 0x38
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <HAL_ADC_MspInit+0xc8>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	200040e8 	.word	0x200040e8
 800071c:	40020008 	.word	0x40020008

08000720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a17      	ldr	r2, [pc, #92]	; (800079c <HAL_UART_MspInit+0x7c>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d128      	bne.n	8000794 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <HAL_UART_MspInit+0x80>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <HAL_UART_MspInit+0x80>)
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_UART_MspInit+0x80>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <HAL_UART_MspInit+0x80>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <HAL_UART_MspInit+0x80>)
 8000760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_UART_MspInit+0x80>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000772:	230c      	movs	r3, #12
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000782:	2307      	movs	r3, #7
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000790:	f001 fe20 	bl	80023d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40004400 	.word	0x40004400
 80007a0:	40021000 	.word	0x40021000

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler+0x4>

080007be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler+0x4>

080007ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f8:	f000 f8be 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <DMA1_Channel1_IRQHandler+0x10>)
 8000806:	f001 fcd8 	bl	80021ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200040e8 	.word	0x200040e8

08000814 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <_sbrk+0x50>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d102      	bne.n	800082a <_sbrk+0x16>
		heap_end = &end;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <_sbrk+0x50>)
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <_sbrk+0x54>)
 8000828:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <_sbrk+0x50>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <_sbrk+0x50>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4413      	add	r3, r2
 8000838:	466a      	mov	r2, sp
 800083a:	4293      	cmp	r3, r2
 800083c:	d907      	bls.n	800084e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800083e:	f003 ff4b 	bl	80046d8 <__errno>
 8000842:	4602      	mov	r2, r0
 8000844:	230c      	movs	r3, #12
 8000846:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	e006      	b.n	800085c <_sbrk+0x48>
	}

	heap_end += incr;
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <_sbrk+0x50>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	4a03      	ldr	r2, [pc, #12]	; (8000864 <_sbrk+0x50>)
 8000858:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800085a:	68fb      	ldr	r3, [r7, #12]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000408c 	.word	0x2000408c
 8000868:	200041b8 	.word	0x200041b8

0800086c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <SystemInit+0x28>)
 8000872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <SystemInit+0x28>)
 8000878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800087c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <SystemInit+0x28>)
 8000882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000886:	609a      	str	r2, [r3, #8]
#endif
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800089c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800089e:	e003      	b.n	80008a8 <LoopCopyDataInit>

080008a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008a6:	3104      	adds	r1, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80008ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008b0:	d3f6      	bcc.n	80008a0 <CopyDataInit>
	ldr	r2, =_sbss
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80008b4:	e002      	b.n	80008bc <LoopFillZerobss>

080008b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008b8:	f842 3b04 	str.w	r3, [r2], #4

080008bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <LoopForever+0x16>)
	cmp	r2, r3
 80008be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008c0:	d3f9      	bcc.n	80008b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008c2:	f7ff ffd3 	bl	800086c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008c6:	f003 ff0d 	bl	80046e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ca:	f7ff fce1 	bl	8000290 <main>

080008ce <LoopForever>:

LoopForever:
    b LoopForever
 80008ce:	e7fe      	b.n	80008ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80008d4:	08004fdc 	.word	0x08004fdc
	ldr	r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008dc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80008e0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80008e4:	200041b4 	.word	0x200041b4

080008e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_2_IRQHandler>
	...

080008ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_Init+0x28>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_Init+0x28>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f001 fb75 	bl	8001fec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000902:	2000      	movs	r0, #0
 8000904:	f000 f808 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff fe7e 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fb8d 	bl	8002056 <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f001 fb55 	bl	8002002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	200041ac 	.word	0x200041ac

080009a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_GetTick+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	200041ac 	.word	0x200041ac

080009b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09a      	sub	sp, #104	; 0x68
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80009ee:	2300      	movs	r3, #0
 80009f0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e1e3      	b.n	8000dc8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d176      	bne.n	8000b00 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d152      	bne.n	8000ac0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fe0b 	bl	8000650 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d13b      	bne.n	8000ac0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f001 f99f 	bl	8001d8c <ADC_Disable>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d12f      	bne.n	8000ac0 <HAL_ADC_Init+0xe0>
 8000a60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d12b      	bne.n	8000ac0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a70:	f023 0302 	bic.w	r3, r3, #2
 8000a74:	f043 0202 	orr.w	r2, r3, #2
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a8a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a9a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a9c:	4b92      	ldr	r3, [pc, #584]	; (8000ce8 <HAL_ADC_Init+0x308>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a92      	ldr	r2, [pc, #584]	; (8000cec <HAL_ADC_Init+0x30c>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	0c9a      	lsrs	r2, r3, #18
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ab2:	e002      	b.n	8000aba <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1f9      	bne.n	8000ab4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000adc:	d110      	bne.n	8000b00 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f023 0312 	bic.w	r3, r3, #18
 8000ae6:	f043 0210 	orr.w	r2, r3, #16
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f043 0201 	orr.w	r2, r3, #1
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f040 8150 	bne.w	8000dae <HAL_ADC_Init+0x3ce>
 8000b0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f040 814b 	bne.w	8000dae <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f040 8143 	bne.w	8000dae <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b30:	f043 0202 	orr.w	r2, r3, #2
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b40:	d004      	beq.n	8000b4c <HAL_ADC_Init+0x16c>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a6a      	ldr	r2, [pc, #424]	; (8000cf0 <HAL_ADC_Init+0x310>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d101      	bne.n	8000b50 <HAL_ADC_Init+0x170>
 8000b4c:	4b69      	ldr	r3, [pc, #420]	; (8000cf4 <HAL_ADC_Init+0x314>)
 8000b4e:	e000      	b.n	8000b52 <HAL_ADC_Init+0x172>
 8000b50:	4b69      	ldr	r3, [pc, #420]	; (8000cf8 <HAL_ADC_Init+0x318>)
 8000b52:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b5c:	d102      	bne.n	8000b64 <HAL_ADC_Init+0x184>
 8000b5e:	4b64      	ldr	r3, [pc, #400]	; (8000cf0 <HAL_ADC_Init+0x310>)
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	e01a      	b.n	8000b9a <HAL_ADC_Init+0x1ba>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a61      	ldr	r2, [pc, #388]	; (8000cf0 <HAL_ADC_Init+0x310>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d103      	bne.n	8000b76 <HAL_ADC_Init+0x196>
 8000b6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e011      	b.n	8000b9a <HAL_ADC_Init+0x1ba>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a60      	ldr	r2, [pc, #384]	; (8000cfc <HAL_ADC_Init+0x31c>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d102      	bne.n	8000b86 <HAL_ADC_Init+0x1a6>
 8000b80:	4b5f      	ldr	r3, [pc, #380]	; (8000d00 <HAL_ADC_Init+0x320>)
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	e009      	b.n	8000b9a <HAL_ADC_Init+0x1ba>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a5d      	ldr	r2, [pc, #372]	; (8000d00 <HAL_ADC_Init+0x320>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d102      	bne.n	8000b96 <HAL_ADC_Init+0x1b6>
 8000b90:	4b5a      	ldr	r3, [pc, #360]	; (8000cfc <HAL_ADC_Init+0x31c>)
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	e001      	b.n	8000b9a <HAL_ADC_Init+0x1ba>
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d108      	bne.n	8000bba <HAL_ADC_Init+0x1da>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d101      	bne.n	8000bba <HAL_ADC_Init+0x1da>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e000      	b.n	8000bbc <HAL_ADC_Init+0x1dc>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d11c      	bne.n	8000bfa <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d010      	beq.n	8000be8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d107      	bne.n	8000be2 <HAL_ADC_Init+0x202>
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d101      	bne.n	8000be2 <HAL_ADC_Init+0x202>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <HAL_ADC_Init+0x204>
 8000be2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d108      	bne.n	8000bfa <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bf8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7e5b      	ldrb	r3, [r3, #25]
 8000bfe:	035b      	lsls	r3, r3, #13
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c04:	2a01      	cmp	r2, #1
 8000c06:	d002      	beq.n	8000c0e <HAL_ADC_Init+0x22e>
 8000c08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c0c:	e000      	b.n	8000c10 <HAL_ADC_Init+0x230>
 8000c0e:	2200      	movs	r2, #0
 8000c10:	431a      	orrs	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	431a      	orrs	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c20:	4313      	orrs	r3, r2
 8000c22:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d11b      	bne.n	8000c66 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7e5b      	ldrb	r3, [r3, #25]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d109      	bne.n	8000c4a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	045a      	lsls	r2, r3, #17
 8000c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c40:	4313      	orrs	r3, r2
 8000c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c46:	663b      	str	r3, [r7, #96]	; 0x60
 8000c48:	e00d      	b.n	8000c66 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000c52:	f043 0220 	orr.w	r2, r3, #32
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f043 0201 	orr.w	r2, r3, #1
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d054      	beq.n	8000d18 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <HAL_ADC_Init+0x31c>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d004      	beq.n	8000c82 <HAL_ADC_Init+0x2a2>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <HAL_ADC_Init+0x320>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d140      	bne.n	8000d04 <HAL_ADC_Init+0x324>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c86:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000c8a:	d02a      	beq.n	8000ce2 <HAL_ADC_Init+0x302>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c94:	d022      	beq.n	8000cdc <HAL_ADC_Init+0x2fc>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000c9e:	d01a      	beq.n	8000cd6 <HAL_ADC_Init+0x2f6>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca4:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000ca8:	d012      	beq.n	8000cd0 <HAL_ADC_Init+0x2f0>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cae:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000cb2:	d00a      	beq.n	8000cca <HAL_ADC_Init+0x2ea>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000cbc:	d002      	beq.n	8000cc4 <HAL_ADC_Init+0x2e4>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc2:	e023      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000cc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cc8:	e020      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000cca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000cce:	e01d      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000cd0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000cd4:	e01a      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cda:	e017      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000cdc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000ce0:	e014      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000ce2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ce6:	e011      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	431bde83 	.word	0x431bde83
 8000cf0:	50000100 	.word	0x50000100
 8000cf4:	50000300 	.word	0x50000300
 8000cf8:	50000700 	.word	0x50000700
 8000cfc:	50000400 	.word	0x50000400
 8000d00:	50000500 	.word	0x50000500
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d10:	4313      	orrs	r3, r2
 8000d12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d14:	4313      	orrs	r3, r2
 8000d16:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 030c 	and.w	r3, r3, #12
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d114      	bne.n	8000d50 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	6812      	ldr	r2, [r2, #0]
 8000d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d34:	f023 0302 	bic.w	r3, r3, #2
 8000d38:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7e1b      	ldrb	r3, [r3, #24]
 8000d3e:	039a      	lsls	r2, r3, #14
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_ADC_Init+0x3f0>)
 8000d58:	4013      	ands	r3, r2
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d60:	430b      	orrs	r3, r1
 8000d62:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10c      	bne.n	8000d86 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f023 010f 	bic.w	r1, r3, #15
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	1e5a      	subs	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	430a      	orrs	r2, r1
 8000d82:	631a      	str	r2, [r3, #48]	; 0x30
 8000d84:	e007      	b.n	8000d96 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 020f 	bic.w	r2, r2, #15
 8000d94:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f023 0303 	bic.w	r3, r3, #3
 8000da4:	f043 0201 	orr.w	r2, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
 8000dac:	e00a      	b.n	8000dc4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f023 0312 	bic.w	r3, r3, #18
 8000db6:	f043 0210 	orr.w	r2, r3, #16
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000dc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3768      	adds	r7, #104	; 0x68
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	fff0c007 	.word	0xfff0c007

08000dd4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 80f9 	bne.w	8000fe2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d101      	bne.n	8000dfe <HAL_ADC_Start+0x2a>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e0f4      	b.n	8000fe8 <HAL_ADC_Start+0x214>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 ff62 	bl	8001cd0 <ADC_Enable>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 80e0 	bne.w	8000fd8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e20:	f023 0301 	bic.w	r3, r3, #1
 8000e24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e34:	d004      	beq.n	8000e40 <HAL_ADC_Start+0x6c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a6d      	ldr	r2, [pc, #436]	; (8000ff0 <HAL_ADC_Start+0x21c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d106      	bne.n	8000e4e <HAL_ADC_Start+0x7a>
 8000e40:	4b6c      	ldr	r3, [pc, #432]	; (8000ff4 <HAL_ADC_Start+0x220>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d010      	beq.n	8000e6e <HAL_ADC_Start+0x9a>
 8000e4c:	e005      	b.n	8000e5a <HAL_ADC_Start+0x86>
 8000e4e:	4b6a      	ldr	r3, [pc, #424]	; (8000ff8 <HAL_ADC_Start+0x224>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 031f 	and.w	r3, r3, #31
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d009      	beq.n	8000e6e <HAL_ADC_Start+0x9a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e62:	d004      	beq.n	8000e6e <HAL_ADC_Start+0x9a>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a64      	ldr	r2, [pc, #400]	; (8000ffc <HAL_ADC_Start+0x228>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d115      	bne.n	8000e9a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d036      	beq.n	8000ef6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e98:	e02d      	b.n	8000ef6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eae:	d004      	beq.n	8000eba <HAL_ADC_Start+0xe6>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a4e      	ldr	r2, [pc, #312]	; (8000ff0 <HAL_ADC_Start+0x21c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10a      	bne.n	8000ed0 <HAL_ADC_Start+0xfc>
 8000eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	bf14      	ite	ne
 8000ec8:	2301      	movne	r3, #1
 8000eca:	2300      	moveq	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	e008      	b.n	8000ee2 <HAL_ADC_Start+0x10e>
 8000ed0:	4b4a      	ldr	r3, [pc, #296]	; (8000ffc <HAL_ADC_Start+0x228>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf14      	ite	ne
 8000edc:	2301      	movne	r3, #1
 8000ede:	2300      	moveq	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f02:	d106      	bne.n	8000f12 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f08:	f023 0206 	bic.w	r2, r3, #6
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	645a      	str	r2, [r3, #68]	; 0x44
 8000f10:	e002      	b.n	8000f18 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	221c      	movs	r2, #28
 8000f26:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f30:	d004      	beq.n	8000f3c <HAL_ADC_Start+0x168>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a2e      	ldr	r2, [pc, #184]	; (8000ff0 <HAL_ADC_Start+0x21c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d106      	bne.n	8000f4a <HAL_ADC_Start+0x176>
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <HAL_ADC_Start+0x220>)
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 031f 	and.w	r3, r3, #31
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d03e      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000f48:	e005      	b.n	8000f56 <HAL_ADC_Start+0x182>
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <HAL_ADC_Start+0x224>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d037      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f5e:	d004      	beq.n	8000f6a <HAL_ADC_Start+0x196>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <HAL_ADC_Start+0x21c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d106      	bne.n	8000f78 <HAL_ADC_Start+0x1a4>
 8000f6a:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <HAL_ADC_Start+0x220>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 031f 	and.w	r3, r3, #31
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	d027      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000f76:	e005      	b.n	8000f84 <HAL_ADC_Start+0x1b0>
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <HAL_ADC_Start+0x224>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	2b05      	cmp	r3, #5
 8000f82:	d020      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f8c:	d004      	beq.n	8000f98 <HAL_ADC_Start+0x1c4>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <HAL_ADC_Start+0x21c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d106      	bne.n	8000fa6 <HAL_ADC_Start+0x1d2>
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_ADC_Start+0x220>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	2b09      	cmp	r3, #9
 8000fa2:	d010      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000fa4:	e005      	b.n	8000fb2 <HAL_ADC_Start+0x1de>
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_ADC_Start+0x224>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	2b09      	cmp	r3, #9
 8000fb0:	d009      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fba:	d004      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_ADC_Start+0x228>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10f      	bne.n	8000fe6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 0204 	orr.w	r2, r2, #4
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	e006      	b.n	8000fe6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000fe0:	e001      	b.n	8000fe6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	50000100 	.word	0x50000100
 8000ff4:	50000300 	.word	0x50000300
 8000ff8:	50000700 	.word	0x50000700
 8000ffc:	50000400 	.word	0x50000400

08001000 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	2b08      	cmp	r3, #8
 8001014:	d102      	bne.n	800101c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001016:	2308      	movs	r3, #8
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e03a      	b.n	8001092 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001024:	d004      	beq.n	8001030 <HAL_ADC_PollForConversion+0x30>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a6e      	ldr	r2, [pc, #440]	; (80011e4 <HAL_ADC_PollForConversion+0x1e4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_ADC_PollForConversion+0x34>
 8001030:	4b6d      	ldr	r3, [pc, #436]	; (80011e8 <HAL_ADC_PollForConversion+0x1e8>)
 8001032:	e000      	b.n	8001036 <HAL_ADC_PollForConversion+0x36>
 8001034:	4b6d      	ldr	r3, [pc, #436]	; (80011ec <HAL_ADC_PollForConversion+0x1ec>)
 8001036:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 031f 	and.w	r3, r3, #31
 8001040:	2b00      	cmp	r3, #0
 8001042:	d112      	bne.n	800106a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b01      	cmp	r3, #1
 8001050:	d11d      	bne.n	800108e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f043 0220 	orr.w	r2, r3, #32
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e0b8      	b.n	80011dc <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f043 0220 	orr.w	r2, r3, #32
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e0a6      	b.n	80011dc <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800108e:	230c      	movs	r3, #12
 8001090:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800109a:	d004      	beq.n	80010a6 <HAL_ADC_PollForConversion+0xa6>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a50      	ldr	r2, [pc, #320]	; (80011e4 <HAL_ADC_PollForConversion+0x1e4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d106      	bne.n	80010b4 <HAL_ADC_PollForConversion+0xb4>
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <HAL_ADC_PollForConversion+0x1e8>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d010      	beq.n	80010d4 <HAL_ADC_PollForConversion+0xd4>
 80010b2:	e005      	b.n	80010c0 <HAL_ADC_PollForConversion+0xc0>
 80010b4:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <HAL_ADC_PollForConversion+0x1ec>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d009      	beq.n	80010d4 <HAL_ADC_PollForConversion+0xd4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010c8:	d004      	beq.n	80010d4 <HAL_ADC_PollForConversion+0xd4>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <HAL_ADC_PollForConversion+0x1f0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d104      	bne.n	80010de <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	e00f      	b.n	80010fe <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010e6:	d004      	beq.n	80010f2 <HAL_ADC_PollForConversion+0xf2>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a3d      	ldr	r2, [pc, #244]	; (80011e4 <HAL_ADC_PollForConversion+0x1e4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d102      	bne.n	80010f8 <HAL_ADC_PollForConversion+0xf8>
 80010f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010f6:	e000      	b.n	80010fa <HAL_ADC_PollForConversion+0xfa>
 80010f8:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <HAL_ADC_PollForConversion+0x1f0>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80010fe:	f7ff fc4f 	bl	80009a0 <HAL_GetTick>
 8001102:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001104:	e01a      	b.n	800113c <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110c:	d016      	beq.n	800113c <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_ADC_PollForConversion+0x124>
 8001114:	f7ff fc44 	bl	80009a0 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d20b      	bcs.n	800113c <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f043 0204 	orr.w	r2, r3, #4
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e04f      	b.n	80011dc <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0dd      	beq.n	8001106 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001160:	2b00      	cmp	r3, #0
 8001162:	d131      	bne.n	80011c8 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800116a:	2b00      	cmp	r3, #0
 800116c:	d12c      	bne.n	80011c8 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	2b08      	cmp	r3, #8
 800117a:	d125      	bne.n	80011c8 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	2b00      	cmp	r3, #0
 8001188:	d112      	bne.n	80011b0 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d112      	bne.n	80011c8 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f043 0201 	orr.w	r2, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
 80011ae:	e00b      	b.n	80011c8 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f043 0220 	orr.w	r2, r3, #32
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d103      	bne.n	80011da <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	50000100 	.word	0x50000100
 80011e8:	50000300 	.word	0x50000300
 80011ec:	50000700 	.word	0x50000700
 80011f0:	50000400 	.word	0x50000400

080011f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	f040 80f7 	bne.w	8001402 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_ADC_Start_DMA+0x2e>
 800121e:	2302      	movs	r3, #2
 8001220:	e0f2      	b.n	8001408 <HAL_ADC_Start_DMA+0x214>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001232:	d004      	beq.n	800123e <HAL_ADC_Start_DMA+0x4a>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a75      	ldr	r2, [pc, #468]	; (8001410 <HAL_ADC_Start_DMA+0x21c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d109      	bne.n	8001252 <HAL_ADC_Start_DMA+0x5e>
 800123e:	4b75      	ldr	r3, [pc, #468]	; (8001414 <HAL_ADC_Start_DMA+0x220>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf0c      	ite	eq
 800124a:	2301      	moveq	r3, #1
 800124c:	2300      	movne	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	e008      	b.n	8001264 <HAL_ADC_Start_DMA+0x70>
 8001252:	4b71      	ldr	r3, [pc, #452]	; (8001418 <HAL_ADC_Start_DMA+0x224>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	2b00      	cmp	r3, #0
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80c5 	beq.w	80013f4 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 fd30 	bl	8001cd0 <ADC_Enable>
 8001270:	4603      	mov	r3, r0
 8001272:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f040 80b7 	bne.w	80013ea <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001298:	d004      	beq.n	80012a4 <HAL_ADC_Start_DMA+0xb0>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a5c      	ldr	r2, [pc, #368]	; (8001410 <HAL_ADC_Start_DMA+0x21c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d106      	bne.n	80012b2 <HAL_ADC_Start_DMA+0xbe>
 80012a4:	4b5b      	ldr	r3, [pc, #364]	; (8001414 <HAL_ADC_Start_DMA+0x220>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d010      	beq.n	80012d2 <HAL_ADC_Start_DMA+0xde>
 80012b0:	e005      	b.n	80012be <HAL_ADC_Start_DMA+0xca>
 80012b2:	4b59      	ldr	r3, [pc, #356]	; (8001418 <HAL_ADC_Start_DMA+0x224>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <HAL_ADC_Start_DMA+0xde>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c6:	d004      	beq.n	80012d2 <HAL_ADC_Start_DMA+0xde>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a53      	ldr	r2, [pc, #332]	; (800141c <HAL_ADC_Start_DMA+0x228>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d115      	bne.n	80012fe <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d036      	beq.n	800135a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012fc:	e02d      	b.n	800135a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001312:	d004      	beq.n	800131e <HAL_ADC_Start_DMA+0x12a>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a3d      	ldr	r2, [pc, #244]	; (8001410 <HAL_ADC_Start_DMA+0x21c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10a      	bne.n	8001334 <HAL_ADC_Start_DMA+0x140>
 800131e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	e008      	b.n	8001346 <HAL_ADC_Start_DMA+0x152>
 8001334:	4b39      	ldr	r3, [pc, #228]	; (800141c <HAL_ADC_Start_DMA+0x228>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf14      	ite	ne
 8001340:	2301      	movne	r3, #1
 8001342:	2300      	moveq	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001352:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001366:	d106      	bne.n	8001376 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136c:	f023 0206 	bic.w	r2, r3, #6
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	645a      	str	r2, [r3, #68]	; 0x44
 8001374:	e002      	b.n	800137c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001388:	4a25      	ldr	r2, [pc, #148]	; (8001420 <HAL_ADC_Start_DMA+0x22c>)
 800138a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001390:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_ADC_Start_DMA+0x230>)
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001398:	4a23      	ldr	r2, [pc, #140]	; (8001428 <HAL_ADC_Start_DMA+0x234>)
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	221c      	movs	r2, #28
 80013a2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0210 	orr.w	r2, r2, #16
 80013b2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0201 	orr.w	r2, r2, #1
 80013c2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3340      	adds	r3, #64	; 0x40
 80013ce:	4619      	mov	r1, r3
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f000 fe92 	bl	80020fc <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0204 	orr.w	r2, r2, #4
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	e00d      	b.n	8001406 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80013f2:	e008      	b.n	8001406 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001400:	e001      	b.n	8001406 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001402:	2302      	movs	r3, #2
 8001404:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001406:	7dfb      	ldrb	r3, [r7, #23]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	50000100 	.word	0x50000100
 8001414:	50000300 	.word	0x50000300
 8001418:	50000700 	.word	0x50000700
 800141c:	50000400 	.word	0x50000400
 8001420:	08001c05 	.word	0x08001c05
 8001424:	08001c7f 	.word	0x08001c7f
 8001428:	08001c9b 	.word	0x08001c9b

0800142c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001448:	b480      	push	{r7}
 800144a:	b09b      	sub	sp, #108	; 0x6c
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001462:	2b01      	cmp	r3, #1
 8001464:	d101      	bne.n	800146a <HAL_ADC_ConfigChannel+0x22>
 8001466:	2302      	movs	r3, #2
 8001468:	e2cb      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x5ba>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	f040 82af 	bne.w	80019e0 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b04      	cmp	r3, #4
 8001488:	d81c      	bhi.n	80014c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	461a      	mov	r2, r3
 800149e:	231f      	movs	r3, #31
 80014a0:	4093      	lsls	r3, r2
 80014a2:	43db      	mvns	r3, r3
 80014a4:	4019      	ands	r1, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30
 80014c2:	e063      	b.n	800158c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	d81e      	bhi.n	800150a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	3b1e      	subs	r3, #30
 80014e0:	221f      	movs	r2, #31
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	4019      	ands	r1, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	3b1e      	subs	r3, #30
 80014fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	635a      	str	r2, [r3, #52]	; 0x34
 8001508:	e040      	b.n	800158c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b0e      	cmp	r3, #14
 8001510:	d81e      	bhi.n	8001550 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	3b3c      	subs	r3, #60	; 0x3c
 8001526:	221f      	movs	r2, #31
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	4019      	ands	r1, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	3b3c      	subs	r3, #60	; 0x3c
 8001542:	fa00 f203 	lsl.w	r2, r0, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	639a      	str	r2, [r3, #56]	; 0x38
 800154e:	e01d      	b.n	800158c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	3b5a      	subs	r3, #90	; 0x5a
 8001564:	221f      	movs	r2, #31
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	4019      	ands	r1, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	3b5a      	subs	r3, #90	; 0x5a
 8001580:	fa00 f203 	lsl.w	r2, r0, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 80e5 	bne.w	8001766 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b09      	cmp	r3, #9
 80015a2:	d91c      	bls.n	80015de <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6999      	ldr	r1, [r3, #24]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	3b1e      	subs	r3, #30
 80015b6:	2207      	movs	r2, #7
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	4019      	ands	r1, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	6898      	ldr	r0, [r3, #8]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	3b1e      	subs	r3, #30
 80015d0:	fa00 f203 	lsl.w	r2, r0, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	619a      	str	r2, [r3, #24]
 80015dc:	e019      	b.n	8001612 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6959      	ldr	r1, [r3, #20]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	2207      	movs	r2, #7
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4019      	ands	r1, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	6898      	ldr	r0, [r3, #8]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	fa00 f203 	lsl.w	r2, r0, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	3b01      	subs	r3, #1
 8001630:	2b03      	cmp	r3, #3
 8001632:	d84f      	bhi.n	80016d4 <HAL_ADC_ConfigChannel+0x28c>
 8001634:	a201      	add	r2, pc, #4	; (adr r2, 800163c <HAL_ADC_ConfigChannel+0x1f4>)
 8001636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163a:	bf00      	nop
 800163c:	0800164d 	.word	0x0800164d
 8001640:	0800166f 	.word	0x0800166f
 8001644:	08001691 	.word	0x08001691
 8001648:	080016b3 	.word	0x080016b3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001652:	4b9f      	ldr	r3, [pc, #636]	; (80018d0 <HAL_ADC_ConfigChannel+0x488>)
 8001654:	4013      	ands	r3, r2
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	0691      	lsls	r1, r2, #26
 800165c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800165e:	430a      	orrs	r2, r1
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800166a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800166c:	e07e      	b.n	800176c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001674:	4b96      	ldr	r3, [pc, #600]	; (80018d0 <HAL_ADC_ConfigChannel+0x488>)
 8001676:	4013      	ands	r3, r2
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	0691      	lsls	r1, r2, #26
 800167e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001680:	430a      	orrs	r2, r1
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800168c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800168e:	e06d      	b.n	800176c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001696:	4b8e      	ldr	r3, [pc, #568]	; (80018d0 <HAL_ADC_ConfigChannel+0x488>)
 8001698:	4013      	ands	r3, r2
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	0691      	lsls	r1, r2, #26
 80016a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016a2:	430a      	orrs	r2, r1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016ae:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016b0:	e05c      	b.n	800176c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016b8:	4b85      	ldr	r3, [pc, #532]	; (80018d0 <HAL_ADC_ConfigChannel+0x488>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	0691      	lsls	r1, r2, #26
 80016c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016c4:	430a      	orrs	r2, r1
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016d0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016d2:	e04b      	b.n	800176c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	069b      	lsls	r3, r3, #26
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d107      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016f6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	069b      	lsls	r3, r3, #26
 8001708:	429a      	cmp	r2, r3
 800170a:	d107      	bne.n	800171c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800171a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	069b      	lsls	r3, r3, #26
 800172c:	429a      	cmp	r2, r3
 800172e:	d107      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800173e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001746:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	069b      	lsls	r3, r3, #26
 8001750:	429a      	cmp	r2, r3
 8001752:	d10a      	bne.n	800176a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001762:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001764:	e001      	b.n	800176a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001766:	bf00      	nop
 8001768:	e000      	b.n	800176c <HAL_ADC_ConfigChannel+0x324>
      break;
 800176a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d108      	bne.n	800178c <HAL_ADC_ConfigChannel+0x344>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_ADC_ConfigChannel+0x344>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_ADC_ConfigChannel+0x346>
 800178c:	2300      	movs	r3, #0
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 8131 	bne.w	80019f6 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d00f      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	400a      	ands	r2, r1
 80017b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80017ba:	e049      	b.n	8001850 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	409a      	lsls	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b09      	cmp	r3, #9
 80017dc:	d91c      	bls.n	8001818 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6999      	ldr	r1, [r3, #24]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	3b1b      	subs	r3, #27
 80017f0:	2207      	movs	r2, #7
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	4019      	ands	r1, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6898      	ldr	r0, [r3, #8]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	3b1b      	subs	r3, #27
 800180a:	fa00 f203 	lsl.w	r2, r0, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	619a      	str	r2, [r3, #24]
 8001816:	e01b      	b.n	8001850 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6959      	ldr	r1, [r3, #20]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	2207      	movs	r2, #7
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	4019      	ands	r1, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	6898      	ldr	r0, [r3, #8]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	fa00 f203 	lsl.w	r2, r0, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001858:	d004      	beq.n	8001864 <HAL_ADC_ConfigChannel+0x41c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <HAL_ADC_ConfigChannel+0x48c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x420>
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_ADC_ConfigChannel+0x490>)
 8001866:	e000      	b.n	800186a <HAL_ADC_ConfigChannel+0x422>
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_ADC_ConfigChannel+0x494>)
 800186a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b10      	cmp	r3, #16
 8001872:	d105      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800187c:	2b00      	cmp	r3, #0
 800187e:	d015      	beq.n	80018ac <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001884:	2b11      	cmp	r3, #17
 8001886:	d105      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00b      	beq.n	80018ac <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001898:	2b12      	cmp	r3, #18
 800189a:	f040 80ac 	bne.w	80019f6 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800189e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f040 80a5 	bne.w	80019f6 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b4:	d102      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x474>
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <HAL_ADC_ConfigChannel+0x48c>)
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e023      	b.n	8001904 <HAL_ADC_ConfigChannel+0x4bc>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_ADC_ConfigChannel+0x48c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10c      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x498>
 80018c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e01a      	b.n	8001904 <HAL_ADC_ConfigChannel+0x4bc>
 80018ce:	bf00      	nop
 80018d0:	83fff000 	.word	0x83fff000
 80018d4:	50000100 	.word	0x50000100
 80018d8:	50000300 	.word	0x50000300
 80018dc:	50000700 	.word	0x50000700
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a4a      	ldr	r2, [pc, #296]	; (8001a10 <HAL_ADC_ConfigChannel+0x5c8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d102      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x4a8>
 80018ea:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <HAL_ADC_ConfigChannel+0x5cc>)
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e009      	b.n	8001904 <HAL_ADC_ConfigChannel+0x4bc>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a47      	ldr	r2, [pc, #284]	; (8001a14 <HAL_ADC_ConfigChannel+0x5cc>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d102      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x4b8>
 80018fa:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_ADC_ConfigChannel+0x5c8>)
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	e001      	b.n	8001904 <HAL_ADC_ConfigChannel+0x4bc>
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d108      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x4dc>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x4dc>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_ADC_ConfigChannel+0x4de>
 8001924:	2300      	movs	r3, #0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d150      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800192a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800192c:	2b00      	cmp	r3, #0
 800192e:	d010      	beq.n	8001952 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d107      	bne.n	800194c <HAL_ADC_ConfigChannel+0x504>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x504>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_ADC_ConfigChannel+0x506>
 800194c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800194e:	2b00      	cmp	r3, #0
 8001950:	d13c      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b10      	cmp	r3, #16
 8001958:	d11d      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x54e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001962:	d118      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800196c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800196e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001970:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <HAL_ADC_ConfigChannel+0x5d0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a29      	ldr	r2, [pc, #164]	; (8001a1c <HAL_ADC_ConfigChannel+0x5d4>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0c9a      	lsrs	r2, r3, #18
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001986:	e002      	b.n	800198e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	3b01      	subs	r3, #1
 800198c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f9      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001994:	e02e      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b11      	cmp	r3, #17
 800199c:	d10b      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x56e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a6:	d106      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80019a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80019b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019b4:	e01e      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d11a      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80019be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019ca:	e013      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f043 0220 	orr.w	r2, r3, #32
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80019de:	e00a      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f043 0220 	orr.w	r2, r3, #32
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80019f2:	e000      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019f4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80019fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	376c      	adds	r7, #108	; 0x6c
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	50000400 	.word	0x50000400
 8001a14:	50000500 	.word	0x50000500
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	431bde83 	.word	0x431bde83

08001a20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b099      	sub	sp, #100	; 0x64
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a38:	d102      	bne.n	8001a40 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001a3a:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	e01a      	b.n	8001a76 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a6a      	ldr	r2, [pc, #424]	; (8001bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d103      	bne.n	8001a52 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001a4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	e011      	b.n	8001a76 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a67      	ldr	r2, [pc, #412]	; (8001bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d102      	bne.n	8001a62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001a5c:	4b66      	ldr	r3, [pc, #408]	; (8001bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	e009      	b.n	8001a76 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a64      	ldr	r2, [pc, #400]	; (8001bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d102      	bne.n	8001a72 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001a6c:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	e001      	b.n	8001a76 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0b0      	b.n	8001be2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e0a9      	b.n	8001be2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 808d 	bne.w	8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 8086 	bne.w	8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001abc:	d004      	beq.n	8001ac8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a4b      	ldr	r2, [pc, #300]	; (8001bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001ac8:	4b4c      	ldr	r3, [pc, #304]	; (8001bfc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001aca:	e000      	b.n	8001ace <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001acc:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001ace:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d040      	beq.n	8001b5a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6859      	ldr	r1, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aea:	035b      	lsls	r3, r3, #13
 8001aec:	430b      	orrs	r3, r1
 8001aee:	431a      	orrs	r2, r3
 8001af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001af2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d108      	bne.n	8001b14 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001b14:	2300      	movs	r3, #0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d15c      	bne.n	8001bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001b36:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d14b      	bne.n	8001bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001b44:	f023 030f 	bic.w	r3, r3, #15
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	6811      	ldr	r1, [r2, #0]
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	6892      	ldr	r2, [r2, #8]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	431a      	orrs	r2, r3
 8001b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b56:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b58:	e03c      	b.n	8001bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b64:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d108      	bne.n	8001b86 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001b86:	2300      	movs	r3, #0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d123      	bne.n	8001bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d107      	bne.n	8001ba8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001ba8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d112      	bne.n	8001bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001bb6:	f023 030f 	bic.w	r3, r3, #15
 8001bba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bbc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bbe:	e009      	b.n	8001bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f043 0220 	orr.w	r2, r3, #32
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001bd2:	e000      	b.n	8001bd6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bd4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001be2:	4618      	mov	r0, r3
 8001be4:	3764      	adds	r7, #100	; 0x64
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	50000100 	.word	0x50000100
 8001bf4:	50000400 	.word	0x50000400
 8001bf8:	50000500 	.word	0x50000500
 8001bfc:	50000300 	.word	0x50000300
 8001c00:	50000700 	.word	0x50000700

08001c04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d126      	bne.n	8001c6c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d115      	bne.n	8001c64 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d111      	bne.n	8001c64 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f043 0201 	orr.w	r2, r3, #1
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7fe fea7 	bl	80009b8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001c6a:	e004      	b.n	8001c76 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4798      	blx	r3
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f7fe fca5 	bl	80005dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	f043 0204 	orr.w	r2, r3, #4
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f7fe fe83 	bl	80009cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d108      	bne.n	8001cfc <ADC_Enable+0x2c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <ADC_Enable+0x2c>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <ADC_Enable+0x2e>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d13c      	bne.n	8001d7c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <ADC_Enable+0xb8>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00d      	beq.n	8001d2c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f043 0210 	orr.w	r2, r3, #16
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e028      	b.n	8001d7e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001d3c:	f7fe fe30 	bl	80009a0 <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d42:	e014      	b.n	8001d6e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d44:	f7fe fe2c 	bl	80009a0 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d90d      	bls.n	8001d6e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f043 0210 	orr.w	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e007      	b.n	8001d7e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d1e3      	bne.n	8001d44 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	8000003f 	.word	0x8000003f

08001d8c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d108      	bne.n	8001db8 <ADC_Disable+0x2c>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <ADC_Disable+0x2c>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <ADC_Disable+0x2e>
 8001db8:	2300      	movs	r3, #0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d040      	beq.n	8001e40 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030d 	and.w	r3, r3, #13
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d10f      	bne.n	8001dec <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0202 	orr.w	r2, r2, #2
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2203      	movs	r2, #3
 8001de2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001de4:	f7fe fddc 	bl	80009a0 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dea:	e022      	b.n	8001e32 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f043 0210 	orr.w	r2, r3, #16
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e01c      	b.n	8001e42 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e08:	f7fe fdca 	bl	80009a0 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d90d      	bls.n	8001e32 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f043 0210 	orr.w	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f043 0201 	orr.w	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e007      	b.n	8001e42 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d0e3      	beq.n	8001e08 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7e:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <__NVIC_EnableIRQ+0x38>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	; (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	; (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	; 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb8:	d301      	bcc.n	8001fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00f      	b.n	8001fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <SysTick_Config+0x40>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f7ff ff8e 	bl	8001eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SysTick_Config+0x40>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SysTick_Config+0x40>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff29 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002014:	f7ff ff3e 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8002018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	6978      	ldr	r0, [r7, #20]
 8002020:	f7ff ff8e 	bl	8001f40 <NVIC_EncodePriority>
 8002024:	4602      	mov	r2, r0
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff5d 	bl	8001eec <__NVIC_SetPriority>
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff31 	bl	8001eb0 <__NVIC_EnableIRQ>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ffa2 	bl	8001fa8 <SysTick_Config>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e037      	b.n	80020f4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800209a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800209e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f940 	bl	800235c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}  
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_DMA_Start_IT+0x20>
 8002118:	2302      	movs	r3, #2
 800211a:	e04a      	b.n	80021b2 <HAL_DMA_Start_IT+0xb6>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800212a:	2b01      	cmp	r3, #1
 800212c:	d13a      	bne.n	80021a4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2202      	movs	r2, #2
 8002132:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f8d4 	bl	8002300 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 020e 	orr.w	r2, r2, #14
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e00f      	b.n	8002192 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 020a 	orr.w	r2, r2, #10
 8002180:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0204 	bic.w	r2, r2, #4
 8002190:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e005      	b.n	80021b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2204      	movs	r2, #4
 80021d8:	409a      	lsls	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d024      	beq.n	800222c <HAL_DMA_IRQHandler+0x72>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01f      	beq.n	800222c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d107      	bne.n	800220a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0204 	bic.w	r2, r2, #4
 8002208:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	2104      	movs	r1, #4
 8002214:	fa01 f202 	lsl.w	r2, r1, r2
 8002218:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	2b00      	cmp	r3, #0
 8002220:	d06a      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800222a:	e065      	b.n	80022f8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	2202      	movs	r2, #2
 8002232:	409a      	lsls	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d02c      	beq.n	8002296 <HAL_DMA_IRQHandler+0xdc>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d027      	beq.n	8002296 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 020a 	bic.w	r2, r2, #10
 8002262:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002274:	2102      	movs	r1, #2
 8002276:	fa01 f202 	lsl.w	r2, r1, r2
 800227a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	2b00      	cmp	r3, #0
 800228a:	d035      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002294:	e030      	b.n	80022f8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2208      	movs	r2, #8
 800229c:	409a      	lsls	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d028      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x13e>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 020e 	bic.w	r2, r2, #14
 80022be:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d004      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
    }
  }
}  
 80022f6:	e7ff      	b.n	80022f8 <HAL_DMA_IRQHandler+0x13e>
 80022f8:	bf00      	nop
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f202 	lsl.w	r2, r1, r2
 800231c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b10      	cmp	r3, #16
 800232c:	d108      	bne.n	8002340 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800233e:	e007      	b.n	8002350 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	60da      	str	r2, [r3, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <DMA_CalcBaseAndBitshift+0x60>)
 800236c:	429a      	cmp	r2, r3
 800236e:	d80f      	bhi.n	8002390 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <DMA_CalcBaseAndBitshift+0x64>)
 8002378:	4413      	add	r3, r2
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <DMA_CalcBaseAndBitshift+0x68>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	009a      	lsls	r2, r3, #2
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <DMA_CalcBaseAndBitshift+0x6c>)
 800238c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800238e:	e00e      	b.n	80023ae <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <DMA_CalcBaseAndBitshift+0x70>)
 8002398:	4413      	add	r3, r2
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <DMA_CalcBaseAndBitshift+0x68>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	009a      	lsls	r2, r3, #2
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <DMA_CalcBaseAndBitshift+0x74>)
 80023ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40020407 	.word	0x40020407
 80023c0:	bffdfff8 	.word	0xbffdfff8
 80023c4:	cccccccd 	.word	0xcccccccd
 80023c8:	40020000 	.word	0x40020000
 80023cc:	bffdfbf8 	.word	0xbffdfbf8
 80023d0:	40020400 	.word	0x40020400

080023d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e2:	e160      	b.n	80026a6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2101      	movs	r1, #1
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	4013      	ands	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8152 	beq.w	80026a0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x38>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b12      	cmp	r3, #18
 800240a:	d123      	bne.n	8002454 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	6939      	ldr	r1, [r7, #16]
 8002450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0203 	and.w	r2, r3, #3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d00b      	beq.n	80024a8 <HAL_GPIO_Init+0xd4>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d007      	beq.n	80024a8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800249c:	2b11      	cmp	r3, #17
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b12      	cmp	r3, #18
 80024a6:	d130      	bne.n	800250a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024de:	2201      	movs	r2, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 0201 	and.w	r2, r3, #1
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80ac 	beq.w	80026a0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002548:	4b5e      	ldr	r3, [pc, #376]	; (80026c4 <HAL_GPIO_Init+0x2f0>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4a5d      	ldr	r2, [pc, #372]	; (80026c4 <HAL_GPIO_Init+0x2f0>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6193      	str	r3, [r2, #24]
 8002554:	4b5b      	ldr	r3, [pc, #364]	; (80026c4 <HAL_GPIO_Init+0x2f0>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002560:	4a59      	ldr	r2, [pc, #356]	; (80026c8 <HAL_GPIO_Init+0x2f4>)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	3302      	adds	r3, #2
 8002568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800258a:	d025      	beq.n	80025d8 <HAL_GPIO_Init+0x204>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a4f      	ldr	r2, [pc, #316]	; (80026cc <HAL_GPIO_Init+0x2f8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d01f      	beq.n	80025d4 <HAL_GPIO_Init+0x200>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a4e      	ldr	r2, [pc, #312]	; (80026d0 <HAL_GPIO_Init+0x2fc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d019      	beq.n	80025d0 <HAL_GPIO_Init+0x1fc>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a4d      	ldr	r2, [pc, #308]	; (80026d4 <HAL_GPIO_Init+0x300>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d013      	beq.n	80025cc <HAL_GPIO_Init+0x1f8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a4c      	ldr	r2, [pc, #304]	; (80026d8 <HAL_GPIO_Init+0x304>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00d      	beq.n	80025c8 <HAL_GPIO_Init+0x1f4>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a4b      	ldr	r2, [pc, #300]	; (80026dc <HAL_GPIO_Init+0x308>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d007      	beq.n	80025c4 <HAL_GPIO_Init+0x1f0>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a4a      	ldr	r2, [pc, #296]	; (80026e0 <HAL_GPIO_Init+0x30c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d101      	bne.n	80025c0 <HAL_GPIO_Init+0x1ec>
 80025bc:	2306      	movs	r3, #6
 80025be:	e00c      	b.n	80025da <HAL_GPIO_Init+0x206>
 80025c0:	2307      	movs	r3, #7
 80025c2:	e00a      	b.n	80025da <HAL_GPIO_Init+0x206>
 80025c4:	2305      	movs	r3, #5
 80025c6:	e008      	b.n	80025da <HAL_GPIO_Init+0x206>
 80025c8:	2304      	movs	r3, #4
 80025ca:	e006      	b.n	80025da <HAL_GPIO_Init+0x206>
 80025cc:	2303      	movs	r3, #3
 80025ce:	e004      	b.n	80025da <HAL_GPIO_Init+0x206>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e002      	b.n	80025da <HAL_GPIO_Init+0x206>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <HAL_GPIO_Init+0x206>
 80025d8:	2300      	movs	r3, #0
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	f002 0203 	and.w	r2, r2, #3
 80025e0:	0092      	lsls	r2, r2, #2
 80025e2:	4093      	lsls	r3, r2
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ea:	4937      	ldr	r1, [pc, #220]	; (80026c8 <HAL_GPIO_Init+0x2f4>)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f8:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <HAL_GPIO_Init+0x310>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	43db      	mvns	r3, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800261c:	4a31      	ldr	r2, [pc, #196]	; (80026e4 <HAL_GPIO_Init+0x310>)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <HAL_GPIO_Init+0x310>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	43db      	mvns	r3, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002646:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <HAL_GPIO_Init+0x310>)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264c:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_GPIO_Init+0x310>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002670:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <HAL_GPIO_Init+0x310>)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <HAL_GPIO_Init+0x310>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800269a:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <HAL_GPIO_Init+0x310>)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f47f ae97 	bne.w	80023e4 <HAL_GPIO_Init+0x10>
  }
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40010000 	.word	0x40010000
 80026cc:	48000400 	.word	0x48000400
 80026d0:	48000800 	.word	0x48000800
 80026d4:	48000c00 	.word	0x48000c00
 80026d8:	48001000 	.word	0x48001000
 80026dc:	48001400 	.word	0x48001400
 80026e0:	48001800 	.word	0x48001800
 80026e4:	40010400 	.word	0x40010400

080026e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	e001      	b.n	800270a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
 8002724:	4613      	mov	r3, r2
 8002726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002728:	787b      	ldrb	r3, [r7, #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002734:	e002      	b.n	800273c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800274e:	af00      	add	r7, sp, #0
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	f000 bf01 	b.w	8003564 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8160 	beq.w	8002a32 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002772:	4bae      	ldr	r3, [pc, #696]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b04      	cmp	r3, #4
 800277c:	d00c      	beq.n	8002798 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800277e:	4bab      	ldr	r3, [pc, #684]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b08      	cmp	r3, #8
 8002788:	d159      	bne.n	800283e <HAL_RCC_OscConfig+0xf6>
 800278a:	4ba8      	ldr	r3, [pc, #672]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002796:	d152      	bne.n	800283e <HAL_RCC_OscConfig+0xf6>
 8002798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d102      	bne.n	80027ca <HAL_RCC_OscConfig+0x82>
 80027c4:	4b99      	ldr	r3, [pc, #612]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0xae>
 80027ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ce:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80027de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027e6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027f2:	4b8e      	ldr	r3, [pc, #568]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027fa:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80027fe:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002802:	fa92 f2a2 	rbit	r2, r2
 8002806:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800280a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800280e:	fab2 f282 	clz	r2, r2
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f042 0220 	orr.w	r2, r2, #32
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f002 021f 	and.w	r2, r2, #31
 800281e:	2101      	movs	r1, #1
 8002820:	fa01 f202 	lsl.w	r2, r1, r2
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8102 	beq.w	8002a30 <HAL_RCC_OscConfig+0x2e8>
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 80fc 	bne.w	8002a30 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f000 be93 	b.w	8003564 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002848:	d106      	bne.n	8002858 <HAL_RCC_OscConfig+0x110>
 800284a:	4b78      	ldr	r3, [pc, #480]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a77      	ldr	r2, [pc, #476]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e030      	b.n	80028ba <HAL_RCC_OscConfig+0x172>
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x134>
 8002862:	4b72      	ldr	r3, [pc, #456]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a71      	ldr	r2, [pc, #452]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 8002868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b6f      	ldr	r3, [pc, #444]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6e      	ldr	r2, [pc, #440]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 8002874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e01e      	b.n	80028ba <HAL_RCC_OscConfig+0x172>
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002886:	d10c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x15a>
 8002888:	4b68      	ldr	r3, [pc, #416]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a67      	ldr	r2, [pc, #412]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 800288e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b65      	ldr	r3, [pc, #404]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a64      	ldr	r2, [pc, #400]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 800289a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	e00b      	b.n	80028ba <HAL_RCC_OscConfig+0x172>
 80028a2:	4b62      	ldr	r3, [pc, #392]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a61      	ldr	r2, [pc, #388]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 80028a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b5f      	ldr	r3, [pc, #380]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a5e      	ldr	r2, [pc, #376]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 80028b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d059      	beq.n	8002978 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe f86c 	bl	80009a0 <HAL_GetTick>
 80028c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ce:	f7fe f867 	bl	80009a0 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d902      	bls.n	80028e4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	f000 be40 	b.w	8003564 <HAL_RCC_OscConfig+0xe1c>
 80028e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80028f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d102      	bne.n	8002916 <HAL_RCC_OscConfig+0x1ce>
 8002910:	4b46      	ldr	r3, [pc, #280]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	e015      	b.n	8002942 <HAL_RCC_OscConfig+0x1fa>
 8002916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800292a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800292e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002932:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800293e:	4b3b      	ldr	r3, [pc, #236]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002946:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800294a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800294e:	fa92 f2a2 	rbit	r2, r2
 8002952:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002956:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800295a:	fab2 f282 	clz	r2, r2
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	f042 0220 	orr.w	r2, r2, #32
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	f002 021f 	and.w	r2, r2, #31
 800296a:	2101      	movs	r1, #1
 800296c:	fa01 f202 	lsl.w	r2, r1, r2
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ab      	beq.n	80028ce <HAL_RCC_OscConfig+0x186>
 8002976:	e05c      	b.n	8002a32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe f812 	bl	80009a0 <HAL_GetTick>
 800297c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002982:	f7fe f80d 	bl	80009a0 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d902      	bls.n	8002998 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	f000 bde6 	b.w	8003564 <HAL_RCC_OscConfig+0xe1c>
 8002998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80029ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d102      	bne.n	80029ca <HAL_RCC_OscConfig+0x282>
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	e015      	b.n	80029f6 <HAL_RCC_OscConfig+0x2ae>
 80029ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80029de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80029e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <HAL_RCC_OscConfig+0x2e4>)
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029fa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80029fe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002a02:	fa92 f2a2 	rbit	r2, r2
 8002a06:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002a0a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a0e:	fab2 f282 	clz	r2, r2
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	f042 0220 	orr.w	r2, r2, #32
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	f002 021f 	and.w	r2, r2, #31
 8002a1e:	2101      	movs	r1, #1
 8002a20:	fa01 f202 	lsl.w	r2, r1, r2
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ab      	bne.n	8002982 <HAL_RCC_OscConfig+0x23a>
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_OscConfig+0x2ea>
 8002a2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8170 	beq.w	8002d22 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a42:	4bd0      	ldr	r3, [pc, #832]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a4e:	4bcd      	ldr	r3, [pc, #820]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d16d      	bne.n	8002b36 <HAL_RCC_OscConfig+0x3ee>
 8002a5a:	4bca      	ldr	r3, [pc, #808]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a66:	d166      	bne.n	8002b36 <HAL_RCC_OscConfig+0x3ee>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002a7a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d102      	bne.n	8002a98 <HAL_RCC_OscConfig+0x350>
 8002a92:	4bbc      	ldr	r3, [pc, #752]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	e013      	b.n	8002ac0 <HAL_RCC_OscConfig+0x378>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002aaa:	2302      	movs	r3, #2
 8002aac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ab0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002abc:	4bb1      	ldr	r3, [pc, #708]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002ac6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002aca:	fa92 f2a2 	rbit	r2, r2
 8002ace:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002ad2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ad6:	fab2 f282 	clz	r2, r2
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f042 0220 	orr.w	r2, r2, #32
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	f002 021f 	and.w	r2, r2, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_RCC_OscConfig+0x3ba>
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d002      	beq.n	8002b02 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f000 bd31 	b.w	8003564 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b02:	4ba0      	ldr	r3, [pc, #640]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	21f8      	movs	r1, #248	; 0xf8
 8002b12:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002b1a:	fa91 f1a1 	rbit	r1, r1
 8002b1e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002b22:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b26:	fab1 f181 	clz	r1, r1
 8002b2a:	b2c9      	uxtb	r1, r1
 8002b2c:	408b      	lsls	r3, r1
 8002b2e:	4995      	ldr	r1, [pc, #596]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b34:	e0f5      	b.n	8002d22 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8085 	beq.w	8002c4c <HAL_RCC_OscConfig+0x504>
 8002b42:	2301      	movs	r3, #1
 8002b44:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002b54:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fd ff17 	bl	80009a0 <HAL_GetTick>
 8002b72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b78:	f7fd ff12 	bl	80009a0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d902      	bls.n	8002b8e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	f000 bceb 	b.w	8003564 <HAL_RCC_OscConfig+0xe1c>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002ba0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_OscConfig+0x476>
 8002bb8:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e013      	b.n	8002be6 <HAL_RCC_OscConfig+0x49e>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002bd6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002be2:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2202      	movs	r2, #2
 8002be8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002bec:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002bf0:	fa92 f2a2 	rbit	r2, r2
 8002bf4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002bf8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002bfc:	fab2 f282 	clz	r2, r2
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f042 0220 	orr.w	r2, r2, #32
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	f002 021f 	and.w	r2, r2, #31
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0af      	beq.n	8002b78 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	21f8      	movs	r1, #248	; 0xf8
 8002c28:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002c30:	fa91 f1a1 	rbit	r1, r1
 8002c34:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002c38:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c3c:	fab1 f181 	clz	r1, r1
 8002c40:	b2c9      	uxtb	r1, r1
 8002c42:	408b      	lsls	r3, r1
 8002c44:	494f      	ldr	r1, [pc, #316]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
 8002c4a:	e06a      	b.n	8002d22 <HAL_RCC_OscConfig+0x5da>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002c5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	461a      	mov	r2, r3
 8002c74:	2300      	movs	r3, #0
 8002c76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fd fe92 	bl	80009a0 <HAL_GetTick>
 8002c7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c82:	f7fd fe8d 	bl	80009a0 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	f000 bc66 	b.w	8003564 <HAL_RCC_OscConfig+0xe1c>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002caa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d102      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x580>
 8002cc2:	4b30      	ldr	r3, [pc, #192]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	e013      	b.n	8002cf0 <HAL_RCC_OscConfig+0x5a8>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002cda:	2302      	movs	r3, #2
 8002cdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_OscConfig+0x63c>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002cf6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002cfa:	fa92 f2a2 	rbit	r2, r2
 8002cfe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002d02:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d06:	fab2 f282 	clz	r2, r2
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	f042 0220 	orr.w	r2, r2, #32
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f002 021f 	and.w	r2, r2, #31
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1af      	bne.n	8002c82 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80da 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d32:	1d3b      	adds	r3, r7, #4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d069      	beq.n	8002e10 <HAL_RCC_OscConfig+0x6c8>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002d4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_OscConfig+0x640>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	461a      	mov	r2, r3
 8002d62:	2301      	movs	r3, #1
 8002d64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d66:	f7fd fe1b 	bl	80009a0 <HAL_GetTick>
 8002d6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	e00d      	b.n	8002d8c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d70:	f7fd fe16 	bl	80009a0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d905      	bls.n	8002d8c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e3ef      	b.n	8003564 <HAL_RCC_OscConfig+0xe1c>
 8002d84:	40021000 	.word	0x40021000
 8002d88:	10908120 	.word	0x10908120
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d96:	fa93 f2a3 	rbit	r2, r3
 8002d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002da4:	2202      	movs	r2, #2
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	fa93 f2a3 	rbit	r2, r3
 8002db2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	fa93 f2a3 	rbit	r2, r3
 8002dca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002dce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd0:	4ba4      	ldr	r3, [pc, #656]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002dd8:	2102      	movs	r1, #2
 8002dda:	6019      	str	r1, [r3, #0]
 8002ddc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fa93 f1a3 	rbit	r1, r3
 8002de6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002dea:	6019      	str	r1, [r3, #0]
  return result;
 8002dec:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0b0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x628>
 8002e0e:	e06a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x79e>
 8002e10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f2a3 	rbit	r2, r3
 8002e22:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e26:	601a      	str	r2, [r3, #0]
  return result;
 8002e28:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e2c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b8c      	ldr	r3, [pc, #560]	; (8003068 <HAL_RCC_OscConfig+0x920>)
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2300      	movs	r3, #0
 8002e40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7fd fdad 	bl	80009a0 <HAL_GetTick>
 8002e46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4a:	e009      	b.n	8002e60 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7fd fda8 	bl	80009a0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e381      	b.n	8003564 <HAL_RCC_OscConfig+0xe1c>
 8002e60:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e64:	2202      	movs	r2, #2
 8002e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fa93 f2a3 	rbit	r2, r3
 8002e72:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	fa93 f2a3 	rbit	r2, r3
 8002e8a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e94:	2202      	movs	r2, #2
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	fa93 f2a3 	rbit	r2, r3
 8002ea2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002ea6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea8:	4b6e      	ldr	r3, [pc, #440]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	6019      	str	r1, [r3, #0]
 8002eb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	fa93 f1a3 	rbit	r1, r3
 8002ebe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ec2:	6019      	str	r1, [r3, #0]
  return result;
 8002ec4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1b2      	bne.n	8002e4c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8157 	beq.w	80031a4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002efc:	4b59      	ldr	r3, [pc, #356]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d112      	bne.n	8002f2e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f08:	4b56      	ldr	r3, [pc, #344]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	4a55      	ldr	r2, [pc, #340]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f12:	61d3      	str	r3, [r2, #28]
 8002f14:	4b53      	ldr	r3, [pc, #332]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4b4f      	ldr	r3, [pc, #316]	; (800306c <HAL_RCC_OscConfig+0x924>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d11a      	bne.n	8002f70 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3a:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_RCC_OscConfig+0x924>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a4b      	ldr	r2, [pc, #300]	; (800306c <HAL_RCC_OscConfig+0x924>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f46:	f7fd fd2b 	bl	80009a0 <HAL_GetTick>
 8002f4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4e:	e009      	b.n	8002f64 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f50:	f7fd fd26 	bl	80009a0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b64      	cmp	r3, #100	; 0x64
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e2ff      	b.n	8003564 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_OscConfig+0x924>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ef      	beq.n	8002f50 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d106      	bne.n	8002f88 <HAL_RCC_OscConfig+0x840>
 8002f7a:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a39      	ldr	r2, [pc, #228]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6213      	str	r3, [r2, #32]
 8002f86:	e02f      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a0>
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x864>
 8002f92:	4b34      	ldr	r3, [pc, #208]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4a33      	ldr	r2, [pc, #204]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	6213      	str	r3, [r2, #32]
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	4a30      	ldr	r2, [pc, #192]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002fa4:	f023 0304 	bic.w	r3, r3, #4
 8002fa8:	6213      	str	r3, [r2, #32]
 8002faa:	e01d      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a0>
 8002fac:	1d3b      	adds	r3, r7, #4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x888>
 8002fb6:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4a2a      	ldr	r2, [pc, #168]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	6213      	str	r3, [r2, #32]
 8002fc2:	4b28      	ldr	r3, [pc, #160]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4a27      	ldr	r2, [pc, #156]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6213      	str	r3, [r2, #32]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x8a0>
 8002fd0:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	4a23      	ldr	r2, [pc, #140]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	6213      	str	r3, [r2, #32]
 8002fdc:	4b21      	ldr	r3, [pc, #132]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4a20      	ldr	r2, [pc, #128]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8002fe2:	f023 0304 	bic.w	r3, r3, #4
 8002fe6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d06a      	beq.n	80030c8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fd fcd5 	bl	80009a0 <HAL_GetTick>
 8002ff6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fd fcd0 	bl	80009a0 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	; 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e2a7      	b.n	8003564 <HAL_RCC_OscConfig+0xe1c>
 8003014:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003018:	2202      	movs	r2, #2
 800301a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003030:	2202      	movs	r2, #2
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	fa93 f2a3 	rbit	r2, r3
 800303e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003042:	601a      	str	r2, [r3, #0]
  return result;
 8003044:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003048:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d108      	bne.n	8003070 <HAL_RCC_OscConfig+0x928>
 800305e:	4b01      	ldr	r3, [pc, #4]	; (8003064 <HAL_RCC_OscConfig+0x91c>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	e013      	b.n	800308c <HAL_RCC_OscConfig+0x944>
 8003064:	40021000 	.word	0x40021000
 8003068:	10908120 	.word	0x10908120
 800306c:	40007000 	.word	0x40007000
 8003070:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003074:	2202      	movs	r2, #2
 8003076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	fa93 f2a3 	rbit	r2, r3
 8003082:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	4bc0      	ldr	r3, [pc, #768]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003090:	2102      	movs	r1, #2
 8003092:	6011      	str	r1, [r2, #0]
 8003094:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	fa92 f1a2 	rbit	r1, r2
 800309e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80030a2:	6011      	str	r1, [r2, #0]
  return result;
 80030a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	fab2 f282 	clz	r2, r2
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	f002 021f 	and.w	r2, r2, #31
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f202 	lsl.w	r2, r1, r2
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d09a      	beq.n	8002ffc <HAL_RCC_OscConfig+0x8b4>
 80030c6:	e063      	b.n	8003190 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fd fc6a 	bl	80009a0 <HAL_GetTick>
 80030cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d0:	e00b      	b.n	80030ea <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fd fc65 	bl	80009a0 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e23c      	b.n	8003564 <HAL_RCC_OscConfig+0xe1c>
 80030ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030ee:	2202      	movs	r2, #2
 80030f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003106:	2202      	movs	r2, #2
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	fa93 f2a3 	rbit	r2, r3
 8003114:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003118:	601a      	str	r2, [r3, #0]
  return result;
 800311a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800311e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d102      	bne.n	800313a <HAL_RCC_OscConfig+0x9f2>
 8003134:	4b95      	ldr	r3, [pc, #596]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	e00d      	b.n	8003156 <HAL_RCC_OscConfig+0xa0e>
 800313a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800313e:	2202      	movs	r2, #2
 8003140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fa93 f2a3 	rbit	r2, r3
 800314c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	4b8e      	ldr	r3, [pc, #568]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800315a:	2102      	movs	r1, #2
 800315c:	6011      	str	r1, [r2, #0]
 800315e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	fa92 f1a2 	rbit	r1, r2
 8003168:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800316c:	6011      	str	r1, [r2, #0]
  return result;
 800316e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	fab2 f282 	clz	r2, r2
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	f002 021f 	and.w	r2, r2, #31
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f202 	lsl.w	r2, r1, r2
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1a0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003190:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003198:	4b7c      	ldr	r3, [pc, #496]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	4a7b      	ldr	r2, [pc, #492]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 800319e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 81d9 	beq.w	8003562 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b0:	4b76      	ldr	r3, [pc, #472]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	f000 81a6 	beq.w	800350a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	f040 811e 	bne.w	8003406 <HAL_RCC_OscConfig+0xcbe>
 80031ca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80031ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	fa93 f2a3 	rbit	r2, r3
 80031de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80031e2:	601a      	str	r2, [r3, #0]
  return result;
 80031e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80031e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	461a      	mov	r2, r3
 80031fc:	2300      	movs	r3, #0
 80031fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fd fbce 	bl	80009a0 <HAL_GetTick>
 8003204:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	e009      	b.n	800321e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320a:	f7fd fbc9 	bl	80009a0 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e1a2      	b.n	8003564 <HAL_RCC_OscConfig+0xe1c>
 800321e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	fa93 f2a3 	rbit	r2, r3
 8003232:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003236:	601a      	str	r2, [r3, #0]
  return result;
 8003238:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800323c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_RCC_OscConfig+0xb10>
 8003252:	4b4e      	ldr	r3, [pc, #312]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	e01b      	b.n	8003290 <HAL_RCC_OscConfig+0xb48>
 8003258:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800325c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	fa93 f2a3 	rbit	r2, r3
 800326c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003276:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	fa93 f2a3 	rbit	r2, r3
 8003286:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	4b3f      	ldr	r3, [pc, #252]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003294:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003298:	6011      	str	r1, [r2, #0]
 800329a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	fa92 f1a2 	rbit	r1, r2
 80032a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032a8:	6011      	str	r1, [r2, #0]
  return result;
 80032aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	fab2 f282 	clz	r2, r2
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f042 0220 	orr.w	r2, r2, #32
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	f002 021f 	and.w	r2, r2, #31
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f202 	lsl.w	r2, r1, r2
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d19e      	bne.n	800320a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032cc:	4b2f      	ldr	r3, [pc, #188]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	f023 020f 	bic.w	r2, r3, #15
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	492c      	ldr	r1, [pc, #176]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	62cb      	str	r3, [r1, #44]	; 0x2c
 80032e0:	4b2a      	ldr	r3, [pc, #168]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6a19      	ldr	r1, [r3, #32]
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	4925      	ldr	r1, [pc, #148]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	604b      	str	r3, [r1, #4]
 80032fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003300:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	fa93 f2a3 	rbit	r2, r3
 8003310:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003314:	601a      	str	r2, [r3, #0]
  return result;
 8003316:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800331a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800331c:	fab3 f383 	clz	r3, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003326:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	461a      	mov	r2, r3
 800332e:	2301      	movs	r3, #1
 8003330:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fd fb35 	bl	80009a0 <HAL_GetTick>
 8003336:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800333a:	e009      	b.n	8003350 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333c:	f7fd fb30 	bl	80009a0 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e109      	b.n	8003564 <HAL_RCC_OscConfig+0xe1c>
 8003350:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003354:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	fa93 f2a3 	rbit	r2, r3
 8003364:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003368:	601a      	str	r2, [r3, #0]
  return result;
 800336a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800336e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d105      	bne.n	8003390 <HAL_RCC_OscConfig+0xc48>
 8003384:	4b01      	ldr	r3, [pc, #4]	; (800338c <HAL_RCC_OscConfig+0xc44>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	e01e      	b.n	80033c8 <HAL_RCC_OscConfig+0xc80>
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f2a3 	rbit	r2, r3
 80033a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fa93 f2a3 	rbit	r2, r3
 80033be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_RCC_OscConfig+0xe28>)
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033d0:	6011      	str	r1, [r2, #0]
 80033d2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	fa92 f1a2 	rbit	r1, r2
 80033dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033e0:	6011      	str	r1, [r2, #0]
  return result;
 80033e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	fab2 f282 	clz	r2, r2
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	f042 0220 	orr.w	r2, r2, #32
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	f002 021f 	and.w	r2, r2, #31
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f202 	lsl.w	r2, r1, r2
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d09b      	beq.n	800333c <HAL_RCC_OscConfig+0xbf4>
 8003404:	e0ad      	b.n	8003562 <HAL_RCC_OscConfig+0xe1a>
 8003406:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800340a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800340e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	fa93 f2a3 	rbit	r2, r3
 800341a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800341e:	601a      	str	r2, [r3, #0]
  return result;
 8003420:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003424:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003430:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	461a      	mov	r2, r3
 8003438:	2300      	movs	r3, #0
 800343a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fd fab0 	bl	80009a0 <HAL_GetTick>
 8003440:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003444:	e009      	b.n	800345a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003446:	f7fd faab 	bl	80009a0 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e084      	b.n	8003564 <HAL_RCC_OscConfig+0xe1c>
 800345a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800345e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	fa93 f2a3 	rbit	r2, r3
 800346e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003472:	601a      	str	r2, [r3, #0]
  return result;
 8003474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003478:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d102      	bne.n	8003494 <HAL_RCC_OscConfig+0xd4c>
 800348e:	4b38      	ldr	r3, [pc, #224]	; (8003570 <HAL_RCC_OscConfig+0xe28>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	e01b      	b.n	80034cc <HAL_RCC_OscConfig+0xd84>
 8003494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800349c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	fa93 f2a3 	rbit	r2, r3
 80034a8:	f107 0320 	add.w	r3, r7, #32
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	f107 031c 	add.w	r3, r7, #28
 80034b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	f107 031c 	add.w	r3, r7, #28
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	fa93 f2a3 	rbit	r2, r3
 80034c2:	f107 0318 	add.w	r3, r7, #24
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_RCC_OscConfig+0xe28>)
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f107 0214 	add.w	r2, r7, #20
 80034d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034d4:	6011      	str	r1, [r2, #0]
 80034d6:	f107 0214 	add.w	r2, r7, #20
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	fa92 f1a2 	rbit	r1, r2
 80034e0:	f107 0210 	add.w	r2, r7, #16
 80034e4:	6011      	str	r1, [r2, #0]
  return result;
 80034e6:	f107 0210 	add.w	r2, r7, #16
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	fab2 f282 	clz	r2, r2
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	f042 0220 	orr.w	r2, r2, #32
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	f002 021f 	and.w	r2, r2, #31
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d19e      	bne.n	8003446 <HAL_RCC_OscConfig+0xcfe>
 8003508:	e02b      	b.n	8003562 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e025      	b.n	8003564 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003518:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_RCC_OscConfig+0xe28>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003520:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCC_OscConfig+0xe28>)
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003528:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800352c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	429a      	cmp	r2, r3
 8003538:	d111      	bne.n	800355e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800353a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800353e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003548:	429a      	cmp	r2, r3
 800354a:	d108      	bne.n	800355e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800354c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003550:	f003 020f 	and.w	r2, r3, #15
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800355a:	429a      	cmp	r2, r3
 800355c:	d001      	beq.n	8003562 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000

08003574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b09e      	sub	sp, #120	; 0x78
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e162      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b90      	ldr	r3, [pc, #576]	; (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d910      	bls.n	80035bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b8d      	ldr	r3, [pc, #564]	; (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	498b      	ldr	r1, [pc, #556]	; (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b89      	ldr	r3, [pc, #548]	; (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e14a      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b82      	ldr	r3, [pc, #520]	; (80037d4 <HAL_RCC_ClockConfig+0x260>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	497f      	ldr	r1, [pc, #508]	; (80037d4 <HAL_RCC_ClockConfig+0x260>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 80dc 	beq.w	80037a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d13c      	bne.n	800366a <HAL_RCC_ClockConfig+0xf6>
 80035f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80035fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003600:	fab3 f383 	clz	r3, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d102      	bne.n	800361a <HAL_RCC_ClockConfig+0xa6>
 8003614:	4b6f      	ldr	r3, [pc, #444]	; (80037d4 <HAL_RCC_ClockConfig+0x260>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	e00f      	b.n	800363a <HAL_RCC_ClockConfig+0xc6>
 800361a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800361e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	667b      	str	r3, [r7, #100]	; 0x64
 8003628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800362c:	663b      	str	r3, [r7, #96]	; 0x60
 800362e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003636:	4b67      	ldr	r3, [pc, #412]	; (80037d4 <HAL_RCC_ClockConfig+0x260>)
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800363e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003640:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003642:	fa92 f2a2 	rbit	r2, r2
 8003646:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800364a:	fab2 f282 	clz	r2, r2
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	f042 0220 	orr.w	r2, r2, #32
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	f002 021f 	and.w	r2, r2, #31
 800365a:	2101      	movs	r1, #1
 800365c:	fa01 f202 	lsl.w	r2, r1, r2
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d17b      	bne.n	800375e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e0f3      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d13c      	bne.n	80036ec <HAL_RCC_ClockConfig+0x178>
 8003672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003676:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d102      	bne.n	800369c <HAL_RCC_ClockConfig+0x128>
 8003696:	4b4f      	ldr	r3, [pc, #316]	; (80037d4 <HAL_RCC_ClockConfig+0x260>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	e00f      	b.n	80036bc <HAL_RCC_ClockConfig+0x148>
 800369c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	647b      	str	r3, [r7, #68]	; 0x44
 80036aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ae:	643b      	str	r3, [r7, #64]	; 0x40
 80036b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b8:	4b46      	ldr	r3, [pc, #280]	; (80037d4 <HAL_RCC_ClockConfig+0x260>)
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80036c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c4:	fa92 f2a2 	rbit	r2, r2
 80036c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80036ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036cc:	fab2 f282 	clz	r2, r2
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	f042 0220 	orr.w	r2, r2, #32
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	f002 021f 	and.w	r2, r2, #31
 80036dc:	2101      	movs	r1, #1
 80036de:	fa01 f202 	lsl.w	r2, r1, r2
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d13a      	bne.n	800375e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0b2      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
 80036ec:	2302      	movs	r3, #2
 80036ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d102      	bne.n	8003714 <HAL_RCC_ClockConfig+0x1a0>
 800370e:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <HAL_RCC_ClockConfig+0x260>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	e00d      	b.n	8003730 <HAL_RCC_ClockConfig+0x1bc>
 8003714:	2302      	movs	r3, #2
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
 8003720:	2302      	movs	r3, #2
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <HAL_RCC_ClockConfig+0x260>)
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	2202      	movs	r2, #2
 8003732:	61ba      	str	r2, [r7, #24]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	fa92 f2a2 	rbit	r2, r2
 800373a:	617a      	str	r2, [r7, #20]
  return result;
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	fab2 f282 	clz	r2, r2
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	f042 0220 	orr.w	r2, r2, #32
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f002 021f 	and.w	r2, r2, #31
 800374e:	2101      	movs	r1, #1
 8003750:	fa01 f202 	lsl.w	r2, r1, r2
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e079      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HAL_RCC_ClockConfig+0x260>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	491a      	ldr	r1, [pc, #104]	; (80037d4 <HAL_RCC_ClockConfig+0x260>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003770:	f7fd f916 	bl	80009a0 <HAL_GetTick>
 8003774:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	e00a      	b.n	800378e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003778:	f7fd f912 	bl	80009a0 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e061      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_RCC_ClockConfig+0x260>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 020c 	and.w	r2, r3, #12
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	429a      	cmp	r2, r3
 800379e:	d1eb      	bne.n	8003778 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d214      	bcs.n	80037d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 0207 	bic.w	r2, r3, #7
 80037b6:	4906      	ldr	r1, [pc, #24]	; (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <HAL_RCC_ClockConfig+0x25c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d005      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e040      	b.n	8003852 <HAL_RCC_ClockConfig+0x2de>
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e4:	4b1d      	ldr	r3, [pc, #116]	; (800385c <HAL_RCC_ClockConfig+0x2e8>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	491a      	ldr	r1, [pc, #104]	; (800385c <HAL_RCC_ClockConfig+0x2e8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003802:	4b16      	ldr	r3, [pc, #88]	; (800385c <HAL_RCC_ClockConfig+0x2e8>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4912      	ldr	r1, [pc, #72]	; (800385c <HAL_RCC_ClockConfig+0x2e8>)
 8003812:	4313      	orrs	r3, r2
 8003814:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003816:	f000 f829 	bl	800386c <HAL_RCC_GetSysClockFreq>
 800381a:	4601      	mov	r1, r0
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <HAL_RCC_ClockConfig+0x2e8>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003824:	22f0      	movs	r2, #240	; 0xf0
 8003826:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	fa92 f2a2 	rbit	r2, r2
 800382e:	60fa      	str	r2, [r7, #12]
  return result;
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	fab2 f282 	clz	r2, r2
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	40d3      	lsrs	r3, r2
 800383a:	4a09      	ldr	r2, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x2ec>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	fa21 f303 	lsr.w	r3, r1, r3
 8003842:	4a08      	ldr	r2, [pc, #32]	; (8003864 <HAL_RCC_ClockConfig+0x2f0>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <HAL_RCC_ClockConfig+0x2f4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd f864 	bl	8000918 <HAL_InitTick>
  
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3778      	adds	r7, #120	; 0x78
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	08004f68 	.word	0x08004f68
 8003864:	20000000 	.word	0x20000000
 8003868:	20000004 	.word	0x20000004

0800386c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800386c:	b480      	push	{r7}
 800386e:	b08b      	sub	sp, #44	; 0x2c
 8003870:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003886:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b04      	cmp	r3, #4
 8003894:	d002      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x30>
 8003896:	2b08      	cmp	r3, #8
 8003898:	d003      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x36>
 800389a:	e03f      	b.n	800391c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_RCC_GetSysClockFreq+0xc8>)
 800389e:	623b      	str	r3, [r7, #32]
      break;
 80038a0:	e03f      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80038a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80038ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	fa92 f2a2 	rbit	r2, r2
 80038b4:	607a      	str	r2, [r7, #4]
  return result;
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	fab2 f282 	clz	r2, r2
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	40d3      	lsrs	r3, r2
 80038c0:	4a1d      	ldr	r2, [pc, #116]	; (8003938 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038c2:	5cd3      	ldrb	r3, [r2, r3]
 80038c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038c6:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	220f      	movs	r2, #15
 80038d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	fa92 f2a2 	rbit	r2, r2
 80038d8:	60fa      	str	r2, [r7, #12]
  return result;
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	fab2 f282 	clz	r2, r2
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	40d3      	lsrs	r3, r2
 80038e4:	4a15      	ldr	r2, [pc, #84]	; (800393c <HAL_RCC_GetSysClockFreq+0xd0>)
 80038e6:	5cd3      	ldrb	r3, [r2, r3]
 80038e8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038f4:	4a0f      	ldr	r2, [pc, #60]	; (8003934 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
 8003904:	e007      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	fbb2 f2f3 	udiv	r2, r2, r3
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	fb02 f303 	mul.w	r3, r2, r3
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	623b      	str	r3, [r7, #32]
      break;
 800391a:	e002      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCC_GetSysClockFreq+0xc8>)
 800391e:	623b      	str	r3, [r7, #32]
      break;
 8003920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003922:	6a3b      	ldr	r3, [r7, #32]
}
 8003924:	4618      	mov	r0, r3
 8003926:	372c      	adds	r7, #44	; 0x2c
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	40021000 	.word	0x40021000
 8003934:	007a1200 	.word	0x007a1200
 8003938:	08004f80 	.word	0x08004f80
 800393c:	08004f90 	.word	0x08004f90

08003940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_RCC_GetHCLKFreq+0x14>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000000 	.word	0x20000000

08003958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800395e:	f7ff ffef 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8003962:	4601      	mov	r1, r0
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800396c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003970:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	fa92 f2a2 	rbit	r2, r2
 8003978:	603a      	str	r2, [r7, #0]
  return result;
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	fab2 f282 	clz	r2, r2
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	40d3      	lsrs	r3, r2
 8003984:	4a04      	ldr	r2, [pc, #16]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003986:	5cd3      	ldrb	r3, [r2, r3]
 8003988:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000
 8003998:	08004f78 	.word	0x08004f78

0800399c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039a2:	f7ff ffcd 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 80039a6:	4601      	mov	r1, r0
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80039b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	fa92 f2a2 	rbit	r2, r2
 80039bc:	603a      	str	r2, [r7, #0]
  return result;
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	fab2 f282 	clz	r2, r2
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	40d3      	lsrs	r3, r2
 80039c8:	4a04      	ldr	r2, [pc, #16]	; (80039dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80039ca:	5cd3      	ldrb	r3, [r2, r3]
 80039cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	08004f78 	.word	0x08004f78

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b092      	sub	sp, #72	; 0x48
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80d7 	beq.w	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a04:	4b4e      	ldr	r3, [pc, #312]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10e      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a10:	4b4b      	ldr	r3, [pc, #300]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4a4a      	ldr	r2, [pc, #296]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	61d3      	str	r3, [r2, #28]
 8003a1c:	4b48      	ldr	r3, [pc, #288]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	4b45      	ldr	r3, [pc, #276]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d118      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3a:	4b42      	ldr	r3, [pc, #264]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a41      	ldr	r2, [pc, #260]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a46:	f7fc ffab 	bl	80009a0 <HAL_GetTick>
 8003a4a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4c:	e008      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4e:	f7fc ffa7 	bl	80009a0 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b64      	cmp	r3, #100	; 0x64
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e1d6      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a60:	4b38      	ldr	r3, [pc, #224]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a6c:	4b34      	ldr	r3, [pc, #208]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8084 	beq.w	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d07c      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a8c:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aa6:	fab3 f383 	clz	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2300      	movs	r3, #0
 8003adc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ade:	4a18      	ldr	r2, [pc, #96]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d04b      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fc ff57 	bl	80009a0 <HAL_GetTick>
 8003af2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af6:	f7fc ff53 	bl	80009a0 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e180      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
 8003b18:	2302      	movs	r3, #2
 8003b1a:	623b      	str	r3, [r7, #32]
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	61fb      	str	r3, [r7, #28]
  return result;
 8003b24:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d108      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b3a:	4b01      	ldr	r3, [pc, #4]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	e00d      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
 8003b48:	10908100 	.word	0x10908100
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	4ba0      	ldr	r3, [pc, #640]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	613a      	str	r2, [r7, #16]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	fa92 f2a2 	rbit	r2, r2
 8003b66:	60fa      	str	r2, [r7, #12]
  return result;
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	fab2 f282 	clz	r2, r2
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	f002 021f 	and.w	r2, r2, #31
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0b7      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b86:	4b95      	ldr	r3, [pc, #596]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4992      	ldr	r1, [pc, #584]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d105      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba0:	4b8e      	ldr	r3, [pc, #568]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	4a8d      	ldr	r2, [pc, #564]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003baa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bb8:	4b88      	ldr	r3, [pc, #544]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	f023 0203 	bic.w	r2, r3, #3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4985      	ldr	r1, [pc, #532]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bd6:	4b81      	ldr	r3, [pc, #516]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	497e      	ldr	r1, [pc, #504]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bf4:	4b79      	ldr	r3, [pc, #484]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	4976      	ldr	r1, [pc, #472]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c12:	4b72      	ldr	r3, [pc, #456]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f023 0210 	bic.w	r2, r3, #16
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	496f      	ldr	r1, [pc, #444]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c30:	4b6a      	ldr	r3, [pc, #424]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	4967      	ldr	r1, [pc, #412]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c4e:	4b63      	ldr	r3, [pc, #396]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	f023 0220 	bic.w	r2, r3, #32
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4960      	ldr	r1, [pc, #384]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c6c:	4b5b      	ldr	r3, [pc, #364]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	4958      	ldr	r1, [pc, #352]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c8a:	4b54      	ldr	r3, [pc, #336]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	4951      	ldr	r1, [pc, #324]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ca8:	4b4c      	ldr	r3, [pc, #304]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	4949      	ldr	r1, [pc, #292]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cc6:	4b45      	ldr	r3, [pc, #276]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4942      	ldr	r1, [pc, #264]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ce4:	4b3d      	ldr	r3, [pc, #244]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	493a      	ldr	r1, [pc, #232]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d02:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	4933      	ldr	r1, [pc, #204]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d20:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2c:	492b      	ldr	r1, [pc, #172]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	4924      	ldr	r1, [pc, #144]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	491c      	ldr	r1, [pc, #112]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003d7a:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	4915      	ldr	r1, [pc, #84]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d98:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	490d      	ldr	r1, [pc, #52]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc2:	4906      	ldr	r1, [pc, #24]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00c      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003dd4:	4b01      	ldr	r3, [pc, #4]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	e002      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	490b      	ldr	r1, [pc, #44]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e06:	4904      	ldr	r1, [pc, #16]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3748      	adds	r7, #72	; 0x48
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000

08003e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e040      	b.n	8003eb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fc fc6e 	bl	8000720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2224      	movs	r2, #36	; 0x24
 8003e48:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8c0 	bl	8003fe0 <UART_SetConfig>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e022      	b.n	8003eb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 face 	bl	8004414 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fb55 	bl	8004558 <UART_CheckIdleState>
 8003eae:	4603      	mov	r3, r0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	; 0x28
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	f040 8081 	bne.w	8003fd4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_UART_Transmit+0x26>
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e079      	b.n	8003fd6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_UART_Transmit+0x38>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e072      	b.n	8003fd6 <HAL_UART_Transmit+0x11e>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2221      	movs	r2, #33	; 0x21
 8003f02:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003f04:	f7fc fd4c 	bl	80009a0 <HAL_GetTick>
 8003f08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	88fa      	ldrh	r2, [r7, #6]
 8003f0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f22:	d108      	bne.n	8003f36 <HAL_UART_Transmit+0x7e>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d104      	bne.n	8003f36 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	61bb      	str	r3, [r7, #24]
 8003f34:	e003      	b.n	8003f3e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f3e:	e02d      	b.n	8003f9c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2200      	movs	r2, #0
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fb49 	bl	80045e2 <UART_WaitOnFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e03d      	b.n	8003fd6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	881a      	ldrh	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f6c:	b292      	uxth	r2, r2
 8003f6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	3302      	adds	r3, #2
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e008      	b.n	8003f8a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	781a      	ldrb	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	b292      	uxth	r2, r2
 8003f82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	3301      	adds	r3, #1
 8003f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1cb      	bne.n	8003f40 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2140      	movs	r1, #64	; 0x40
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fb15 	bl	80045e2 <UART_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e009      	b.n	8003fd6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4bac      	ldr	r3, [pc, #688]	; (80042c0 <UART_SetConfig+0x2e0>)
 8004010:	4013      	ands	r3, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	6939      	ldr	r1, [r7, #16]
 8004018:	430b      	orrs	r3, r1
 800401a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	430a      	orrs	r2, r1
 8004054:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a9a      	ldr	r2, [pc, #616]	; (80042c4 <UART_SetConfig+0x2e4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d121      	bne.n	80040a4 <UART_SetConfig+0xc4>
 8004060:	4b99      	ldr	r3, [pc, #612]	; (80042c8 <UART_SetConfig+0x2e8>)
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	2b03      	cmp	r3, #3
 800406a:	d817      	bhi.n	800409c <UART_SetConfig+0xbc>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0x94>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004085 	.word	0x08004085
 8004078:	08004091 	.word	0x08004091
 800407c:	08004097 	.word	0x08004097
 8004080:	0800408b 	.word	0x0800408b
 8004084:	2301      	movs	r3, #1
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e0b2      	b.n	80041f0 <UART_SetConfig+0x210>
 800408a:	2302      	movs	r3, #2
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e0af      	b.n	80041f0 <UART_SetConfig+0x210>
 8004090:	2304      	movs	r3, #4
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e0ac      	b.n	80041f0 <UART_SetConfig+0x210>
 8004096:	2308      	movs	r3, #8
 8004098:	77fb      	strb	r3, [r7, #31]
 800409a:	e0a9      	b.n	80041f0 <UART_SetConfig+0x210>
 800409c:	2310      	movs	r3, #16
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	bf00      	nop
 80040a2:	e0a5      	b.n	80041f0 <UART_SetConfig+0x210>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a88      	ldr	r2, [pc, #544]	; (80042cc <UART_SetConfig+0x2ec>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d123      	bne.n	80040f6 <UART_SetConfig+0x116>
 80040ae:	4b86      	ldr	r3, [pc, #536]	; (80042c8 <UART_SetConfig+0x2e8>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ba:	d012      	beq.n	80040e2 <UART_SetConfig+0x102>
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d802      	bhi.n	80040c8 <UART_SetConfig+0xe8>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <UART_SetConfig+0xf6>
 80040c6:	e012      	b.n	80040ee <UART_SetConfig+0x10e>
 80040c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040cc:	d00c      	beq.n	80040e8 <UART_SetConfig+0x108>
 80040ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040d2:	d003      	beq.n	80040dc <UART_SetConfig+0xfc>
 80040d4:	e00b      	b.n	80040ee <UART_SetConfig+0x10e>
 80040d6:	2300      	movs	r3, #0
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e089      	b.n	80041f0 <UART_SetConfig+0x210>
 80040dc:	2302      	movs	r3, #2
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e086      	b.n	80041f0 <UART_SetConfig+0x210>
 80040e2:	2304      	movs	r3, #4
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e083      	b.n	80041f0 <UART_SetConfig+0x210>
 80040e8:	2308      	movs	r3, #8
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e080      	b.n	80041f0 <UART_SetConfig+0x210>
 80040ee:	2310      	movs	r3, #16
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	bf00      	nop
 80040f4:	e07c      	b.n	80041f0 <UART_SetConfig+0x210>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a75      	ldr	r2, [pc, #468]	; (80042d0 <UART_SetConfig+0x2f0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d123      	bne.n	8004148 <UART_SetConfig+0x168>
 8004100:	4b71      	ldr	r3, [pc, #452]	; (80042c8 <UART_SetConfig+0x2e8>)
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004108:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800410c:	d012      	beq.n	8004134 <UART_SetConfig+0x154>
 800410e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004112:	d802      	bhi.n	800411a <UART_SetConfig+0x13a>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <UART_SetConfig+0x148>
 8004118:	e012      	b.n	8004140 <UART_SetConfig+0x160>
 800411a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800411e:	d00c      	beq.n	800413a <UART_SetConfig+0x15a>
 8004120:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004124:	d003      	beq.n	800412e <UART_SetConfig+0x14e>
 8004126:	e00b      	b.n	8004140 <UART_SetConfig+0x160>
 8004128:	2300      	movs	r3, #0
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e060      	b.n	80041f0 <UART_SetConfig+0x210>
 800412e:	2302      	movs	r3, #2
 8004130:	77fb      	strb	r3, [r7, #31]
 8004132:	e05d      	b.n	80041f0 <UART_SetConfig+0x210>
 8004134:	2304      	movs	r3, #4
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e05a      	b.n	80041f0 <UART_SetConfig+0x210>
 800413a:	2308      	movs	r3, #8
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e057      	b.n	80041f0 <UART_SetConfig+0x210>
 8004140:	2310      	movs	r3, #16
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	bf00      	nop
 8004146:	e053      	b.n	80041f0 <UART_SetConfig+0x210>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a61      	ldr	r2, [pc, #388]	; (80042d4 <UART_SetConfig+0x2f4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d123      	bne.n	800419a <UART_SetConfig+0x1ba>
 8004152:	4b5d      	ldr	r3, [pc, #372]	; (80042c8 <UART_SetConfig+0x2e8>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800415a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800415e:	d012      	beq.n	8004186 <UART_SetConfig+0x1a6>
 8004160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004164:	d802      	bhi.n	800416c <UART_SetConfig+0x18c>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <UART_SetConfig+0x19a>
 800416a:	e012      	b.n	8004192 <UART_SetConfig+0x1b2>
 800416c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004170:	d00c      	beq.n	800418c <UART_SetConfig+0x1ac>
 8004172:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004176:	d003      	beq.n	8004180 <UART_SetConfig+0x1a0>
 8004178:	e00b      	b.n	8004192 <UART_SetConfig+0x1b2>
 800417a:	2300      	movs	r3, #0
 800417c:	77fb      	strb	r3, [r7, #31]
 800417e:	e037      	b.n	80041f0 <UART_SetConfig+0x210>
 8004180:	2302      	movs	r3, #2
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e034      	b.n	80041f0 <UART_SetConfig+0x210>
 8004186:	2304      	movs	r3, #4
 8004188:	77fb      	strb	r3, [r7, #31]
 800418a:	e031      	b.n	80041f0 <UART_SetConfig+0x210>
 800418c:	2308      	movs	r3, #8
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e02e      	b.n	80041f0 <UART_SetConfig+0x210>
 8004192:	2310      	movs	r3, #16
 8004194:	77fb      	strb	r3, [r7, #31]
 8004196:	bf00      	nop
 8004198:	e02a      	b.n	80041f0 <UART_SetConfig+0x210>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a4e      	ldr	r2, [pc, #312]	; (80042d8 <UART_SetConfig+0x2f8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d123      	bne.n	80041ec <UART_SetConfig+0x20c>
 80041a4:	4b48      	ldr	r3, [pc, #288]	; (80042c8 <UART_SetConfig+0x2e8>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80041ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b0:	d012      	beq.n	80041d8 <UART_SetConfig+0x1f8>
 80041b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b6:	d802      	bhi.n	80041be <UART_SetConfig+0x1de>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <UART_SetConfig+0x1ec>
 80041bc:	e012      	b.n	80041e4 <UART_SetConfig+0x204>
 80041be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041c2:	d00c      	beq.n	80041de <UART_SetConfig+0x1fe>
 80041c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c8:	d003      	beq.n	80041d2 <UART_SetConfig+0x1f2>
 80041ca:	e00b      	b.n	80041e4 <UART_SetConfig+0x204>
 80041cc:	2300      	movs	r3, #0
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e00e      	b.n	80041f0 <UART_SetConfig+0x210>
 80041d2:	2302      	movs	r3, #2
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e00b      	b.n	80041f0 <UART_SetConfig+0x210>
 80041d8:	2304      	movs	r3, #4
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e008      	b.n	80041f0 <UART_SetConfig+0x210>
 80041de:	2308      	movs	r3, #8
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e005      	b.n	80041f0 <UART_SetConfig+0x210>
 80041e4:	2310      	movs	r3, #16
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	bf00      	nop
 80041ea:	e001      	b.n	80041f0 <UART_SetConfig+0x210>
 80041ec:	2310      	movs	r3, #16
 80041ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f8:	f040 8090 	bne.w	800431c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80041fc:	7ffb      	ldrb	r3, [r7, #31]
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d86c      	bhi.n	80042dc <UART_SetConfig+0x2fc>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0x228>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	0800422d 	.word	0x0800422d
 800420c:	0800424d 	.word	0x0800424d
 8004210:	0800426d 	.word	0x0800426d
 8004214:	080042dd 	.word	0x080042dd
 8004218:	08004289 	.word	0x08004289
 800421c:	080042dd 	.word	0x080042dd
 8004220:	080042dd 	.word	0x080042dd
 8004224:	080042dd 	.word	0x080042dd
 8004228:	080042a9 	.word	0x080042a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800422c:	f7ff fb94 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 8004230:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	005a      	lsls	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	441a      	add	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	fbb2 f3f3 	udiv	r3, r2, r3
 8004246:	b29b      	uxth	r3, r3
 8004248:	61bb      	str	r3, [r7, #24]
        break;
 800424a:	e04a      	b.n	80042e2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7ff fba6 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8004250:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	005a      	lsls	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	441a      	add	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	fbb2 f3f3 	udiv	r3, r2, r3
 8004266:	b29b      	uxth	r3, r3
 8004268:	61bb      	str	r3, [r7, #24]
        break;
 800426a:	e03a      	b.n	80042e2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004276:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6852      	ldr	r2, [r2, #4]
 800427e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004282:	b29b      	uxth	r3, r3
 8004284:	61bb      	str	r3, [r7, #24]
        break;
 8004286:	e02c      	b.n	80042e2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004288:	f7ff faf0 	bl	800386c <HAL_RCC_GetSysClockFreq>
 800428c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	005a      	lsls	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	441a      	add	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	61bb      	str	r3, [r7, #24]
        break;
 80042a6:	e01c      	b.n	80042e2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	61bb      	str	r3, [r7, #24]
        break;
 80042be:	e010      	b.n	80042e2 <UART_SetConfig+0x302>
 80042c0:	efff69f3 	.word	0xefff69f3
 80042c4:	40013800 	.word	0x40013800
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40004400 	.word	0x40004400
 80042d0:	40004800 	.word	0x40004800
 80042d4:	40004c00 	.word	0x40004c00
 80042d8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	75fb      	strb	r3, [r7, #23]
        break;
 80042e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b0f      	cmp	r3, #15
 80042e6:	d916      	bls.n	8004316 <UART_SetConfig+0x336>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ee:	d212      	bcs.n	8004316 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f023 030f 	bic.w	r3, r3, #15
 80042f8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	b29a      	uxth	r2, r3
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	4313      	orrs	r3, r2
 800430a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	897a      	ldrh	r2, [r7, #10]
 8004312:	60da      	str	r2, [r3, #12]
 8004314:	e072      	b.n	80043fc <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
 800431a:	e06f      	b.n	80043fc <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800431c:	7ffb      	ldrb	r3, [r7, #31]
 800431e:	2b08      	cmp	r3, #8
 8004320:	d85b      	bhi.n	80043da <UART_SetConfig+0x3fa>
 8004322:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <UART_SetConfig+0x348>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	0800434d 	.word	0x0800434d
 800432c:	0800436b 	.word	0x0800436b
 8004330:	08004389 	.word	0x08004389
 8004334:	080043db 	.word	0x080043db
 8004338:	080043a5 	.word	0x080043a5
 800433c:	080043db 	.word	0x080043db
 8004340:	080043db 	.word	0x080043db
 8004344:	080043db 	.word	0x080043db
 8004348:	080043c3 	.word	0x080043c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800434c:	f7ff fb04 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 8004350:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	085a      	lsrs	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	441a      	add	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	b29b      	uxth	r3, r3
 8004366:	61bb      	str	r3, [r7, #24]
        break;
 8004368:	e03a      	b.n	80043e0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800436a:	f7ff fb17 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 800436e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	085a      	lsrs	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	441a      	add	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	b29b      	uxth	r3, r3
 8004384:	61bb      	str	r3, [r7, #24]
        break;
 8004386:	e02b      	b.n	80043e0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	085b      	lsrs	r3, r3, #1
 800438e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004392:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6852      	ldr	r2, [r2, #4]
 800439a:	fbb3 f3f2 	udiv	r3, r3, r2
 800439e:	b29b      	uxth	r3, r3
 80043a0:	61bb      	str	r3, [r7, #24]
        break;
 80043a2:	e01d      	b.n	80043e0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043a4:	f7ff fa62 	bl	800386c <HAL_RCC_GetSysClockFreq>
 80043a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	085a      	lsrs	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	441a      	add	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	b29b      	uxth	r3, r3
 80043be:	61bb      	str	r3, [r7, #24]
        break;
 80043c0:	e00e      	b.n	80043e0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	61bb      	str	r3, [r7, #24]
        break;
 80043d8:	e002      	b.n	80043e0 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	75fb      	strb	r3, [r7, #23]
        break;
 80043de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b0f      	cmp	r3, #15
 80043e4:	d908      	bls.n	80043f8 <UART_SetConfig+0x418>
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d204      	bcs.n	80043f8 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	60da      	str	r2, [r3, #12]
 80043f6:	e001      	b.n	80043fc <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004408:	7dfb      	ldrb	r3, [r7, #23]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop

08004414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01a      	beq.n	800452a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004512:	d10a      	bne.n	800452a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	605a      	str	r2, [r3, #4]
  }
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af02      	add	r7, sp, #8
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004566:	f7fc fa1b 	bl	80009a0 <HAL_GetTick>
 800456a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b08      	cmp	r3, #8
 8004578:	d10e      	bne.n	8004598 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800457a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f82a 	bl	80045e2 <UART_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e020      	b.n	80045da <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d10e      	bne.n	80045c4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f814 	bl	80045e2 <UART_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e00a      	b.n	80045da <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	4613      	mov	r3, r2
 80045f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f2:	e05d      	b.n	80046b0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d059      	beq.n	80046b0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fc:	f7fc f9d0 	bl	80009a0 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	429a      	cmp	r2, r3
 800460a:	d302      	bcc.n	8004612 <UART_WaitOnFlagUntilTimeout+0x30>
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d11b      	bne.n	800464a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004620:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e042      	b.n	80046d0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d02b      	beq.n	80046b0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004666:	d123      	bne.n	80046b0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004670:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004680:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0201 	bic.w	r2, r2, #1
 8004690:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e00f      	b.n	80046d0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69da      	ldr	r2, [r3, #28]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4013      	ands	r3, r2
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	429a      	cmp	r2, r3
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d092      	beq.n	80045f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <__errno>:
 80046d8:	4b01      	ldr	r3, [pc, #4]	; (80046e0 <__errno+0x8>)
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	2000000c 	.word	0x2000000c

080046e4 <__libc_init_array>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	4e0d      	ldr	r6, [pc, #52]	; (800471c <__libc_init_array+0x38>)
 80046e8:	4c0d      	ldr	r4, [pc, #52]	; (8004720 <__libc_init_array+0x3c>)
 80046ea:	1ba4      	subs	r4, r4, r6
 80046ec:	10a4      	asrs	r4, r4, #2
 80046ee:	2500      	movs	r5, #0
 80046f0:	42a5      	cmp	r5, r4
 80046f2:	d109      	bne.n	8004708 <__libc_init_array+0x24>
 80046f4:	4e0b      	ldr	r6, [pc, #44]	; (8004724 <__libc_init_array+0x40>)
 80046f6:	4c0c      	ldr	r4, [pc, #48]	; (8004728 <__libc_init_array+0x44>)
 80046f8:	f000 fc26 	bl	8004f48 <_init>
 80046fc:	1ba4      	subs	r4, r4, r6
 80046fe:	10a4      	asrs	r4, r4, #2
 8004700:	2500      	movs	r5, #0
 8004702:	42a5      	cmp	r5, r4
 8004704:	d105      	bne.n	8004712 <__libc_init_array+0x2e>
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800470c:	4798      	blx	r3
 800470e:	3501      	adds	r5, #1
 8004710:	e7ee      	b.n	80046f0 <__libc_init_array+0xc>
 8004712:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004716:	4798      	blx	r3
 8004718:	3501      	adds	r5, #1
 800471a:	e7f2      	b.n	8004702 <__libc_init_array+0x1e>
 800471c:	08004fd4 	.word	0x08004fd4
 8004720:	08004fd4 	.word	0x08004fd4
 8004724:	08004fd4 	.word	0x08004fd4
 8004728:	08004fd8 	.word	0x08004fd8

0800472c <memset>:
 800472c:	4402      	add	r2, r0
 800472e:	4603      	mov	r3, r0
 8004730:	4293      	cmp	r3, r2
 8004732:	d100      	bne.n	8004736 <memset+0xa>
 8004734:	4770      	bx	lr
 8004736:	f803 1b01 	strb.w	r1, [r3], #1
 800473a:	e7f9      	b.n	8004730 <memset+0x4>

0800473c <siprintf>:
 800473c:	b40e      	push	{r1, r2, r3}
 800473e:	b500      	push	{lr}
 8004740:	b09c      	sub	sp, #112	; 0x70
 8004742:	ab1d      	add	r3, sp, #116	; 0x74
 8004744:	9002      	str	r0, [sp, #8]
 8004746:	9006      	str	r0, [sp, #24]
 8004748:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800474c:	4809      	ldr	r0, [pc, #36]	; (8004774 <siprintf+0x38>)
 800474e:	9107      	str	r1, [sp, #28]
 8004750:	9104      	str	r1, [sp, #16]
 8004752:	4909      	ldr	r1, [pc, #36]	; (8004778 <siprintf+0x3c>)
 8004754:	f853 2b04 	ldr.w	r2, [r3], #4
 8004758:	9105      	str	r1, [sp, #20]
 800475a:	6800      	ldr	r0, [r0, #0]
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	a902      	add	r1, sp, #8
 8004760:	f000 f866 	bl	8004830 <_svfiprintf_r>
 8004764:	9b02      	ldr	r3, [sp, #8]
 8004766:	2200      	movs	r2, #0
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	b01c      	add	sp, #112	; 0x70
 800476c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004770:	b003      	add	sp, #12
 8004772:	4770      	bx	lr
 8004774:	2000000c 	.word	0x2000000c
 8004778:	ffff0208 	.word	0xffff0208

0800477c <__ssputs_r>:
 800477c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004780:	688e      	ldr	r6, [r1, #8]
 8004782:	429e      	cmp	r6, r3
 8004784:	4682      	mov	sl, r0
 8004786:	460c      	mov	r4, r1
 8004788:	4690      	mov	r8, r2
 800478a:	4699      	mov	r9, r3
 800478c:	d837      	bhi.n	80047fe <__ssputs_r+0x82>
 800478e:	898a      	ldrh	r2, [r1, #12]
 8004790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004794:	d031      	beq.n	80047fa <__ssputs_r+0x7e>
 8004796:	6825      	ldr	r5, [r4, #0]
 8004798:	6909      	ldr	r1, [r1, #16]
 800479a:	1a6f      	subs	r7, r5, r1
 800479c:	6965      	ldr	r5, [r4, #20]
 800479e:	2302      	movs	r3, #2
 80047a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80047a8:	f109 0301 	add.w	r3, r9, #1
 80047ac:	443b      	add	r3, r7
 80047ae:	429d      	cmp	r5, r3
 80047b0:	bf38      	it	cc
 80047b2:	461d      	movcc	r5, r3
 80047b4:	0553      	lsls	r3, r2, #21
 80047b6:	d530      	bpl.n	800481a <__ssputs_r+0x9e>
 80047b8:	4629      	mov	r1, r5
 80047ba:	f000 fb2b 	bl	8004e14 <_malloc_r>
 80047be:	4606      	mov	r6, r0
 80047c0:	b950      	cbnz	r0, 80047d8 <__ssputs_r+0x5c>
 80047c2:	230c      	movs	r3, #12
 80047c4:	f8ca 3000 	str.w	r3, [sl]
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ce:	81a3      	strh	r3, [r4, #12]
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d8:	463a      	mov	r2, r7
 80047da:	6921      	ldr	r1, [r4, #16]
 80047dc:	f000 faa8 	bl	8004d30 <memcpy>
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ea:	81a3      	strh	r3, [r4, #12]
 80047ec:	6126      	str	r6, [r4, #16]
 80047ee:	6165      	str	r5, [r4, #20]
 80047f0:	443e      	add	r6, r7
 80047f2:	1bed      	subs	r5, r5, r7
 80047f4:	6026      	str	r6, [r4, #0]
 80047f6:	60a5      	str	r5, [r4, #8]
 80047f8:	464e      	mov	r6, r9
 80047fa:	454e      	cmp	r6, r9
 80047fc:	d900      	bls.n	8004800 <__ssputs_r+0x84>
 80047fe:	464e      	mov	r6, r9
 8004800:	4632      	mov	r2, r6
 8004802:	4641      	mov	r1, r8
 8004804:	6820      	ldr	r0, [r4, #0]
 8004806:	f000 fa9e 	bl	8004d46 <memmove>
 800480a:	68a3      	ldr	r3, [r4, #8]
 800480c:	1b9b      	subs	r3, r3, r6
 800480e:	60a3      	str	r3, [r4, #8]
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	441e      	add	r6, r3
 8004814:	6026      	str	r6, [r4, #0]
 8004816:	2000      	movs	r0, #0
 8004818:	e7dc      	b.n	80047d4 <__ssputs_r+0x58>
 800481a:	462a      	mov	r2, r5
 800481c:	f000 fb54 	bl	8004ec8 <_realloc_r>
 8004820:	4606      	mov	r6, r0
 8004822:	2800      	cmp	r0, #0
 8004824:	d1e2      	bne.n	80047ec <__ssputs_r+0x70>
 8004826:	6921      	ldr	r1, [r4, #16]
 8004828:	4650      	mov	r0, sl
 800482a:	f000 faa5 	bl	8004d78 <_free_r>
 800482e:	e7c8      	b.n	80047c2 <__ssputs_r+0x46>

08004830 <_svfiprintf_r>:
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	461d      	mov	r5, r3
 8004836:	898b      	ldrh	r3, [r1, #12]
 8004838:	061f      	lsls	r7, r3, #24
 800483a:	b09d      	sub	sp, #116	; 0x74
 800483c:	4680      	mov	r8, r0
 800483e:	460c      	mov	r4, r1
 8004840:	4616      	mov	r6, r2
 8004842:	d50f      	bpl.n	8004864 <_svfiprintf_r+0x34>
 8004844:	690b      	ldr	r3, [r1, #16]
 8004846:	b96b      	cbnz	r3, 8004864 <_svfiprintf_r+0x34>
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	f000 fae3 	bl	8004e14 <_malloc_r>
 800484e:	6020      	str	r0, [r4, #0]
 8004850:	6120      	str	r0, [r4, #16]
 8004852:	b928      	cbnz	r0, 8004860 <_svfiprintf_r+0x30>
 8004854:	230c      	movs	r3, #12
 8004856:	f8c8 3000 	str.w	r3, [r8]
 800485a:	f04f 30ff 	mov.w	r0, #4294967295
 800485e:	e0c8      	b.n	80049f2 <_svfiprintf_r+0x1c2>
 8004860:	2340      	movs	r3, #64	; 0x40
 8004862:	6163      	str	r3, [r4, #20]
 8004864:	2300      	movs	r3, #0
 8004866:	9309      	str	r3, [sp, #36]	; 0x24
 8004868:	2320      	movs	r3, #32
 800486a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800486e:	2330      	movs	r3, #48	; 0x30
 8004870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004874:	9503      	str	r5, [sp, #12]
 8004876:	f04f 0b01 	mov.w	fp, #1
 800487a:	4637      	mov	r7, r6
 800487c:	463d      	mov	r5, r7
 800487e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004882:	b10b      	cbz	r3, 8004888 <_svfiprintf_r+0x58>
 8004884:	2b25      	cmp	r3, #37	; 0x25
 8004886:	d13e      	bne.n	8004906 <_svfiprintf_r+0xd6>
 8004888:	ebb7 0a06 	subs.w	sl, r7, r6
 800488c:	d00b      	beq.n	80048a6 <_svfiprintf_r+0x76>
 800488e:	4653      	mov	r3, sl
 8004890:	4632      	mov	r2, r6
 8004892:	4621      	mov	r1, r4
 8004894:	4640      	mov	r0, r8
 8004896:	f7ff ff71 	bl	800477c <__ssputs_r>
 800489a:	3001      	adds	r0, #1
 800489c:	f000 80a4 	beq.w	80049e8 <_svfiprintf_r+0x1b8>
 80048a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a2:	4453      	add	r3, sl
 80048a4:	9309      	str	r3, [sp, #36]	; 0x24
 80048a6:	783b      	ldrb	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 809d 	beq.w	80049e8 <_svfiprintf_r+0x1b8>
 80048ae:	2300      	movs	r3, #0
 80048b0:	f04f 32ff 	mov.w	r2, #4294967295
 80048b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048b8:	9304      	str	r3, [sp, #16]
 80048ba:	9307      	str	r3, [sp, #28]
 80048bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048c0:	931a      	str	r3, [sp, #104]	; 0x68
 80048c2:	462f      	mov	r7, r5
 80048c4:	2205      	movs	r2, #5
 80048c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80048ca:	4850      	ldr	r0, [pc, #320]	; (8004a0c <_svfiprintf_r+0x1dc>)
 80048cc:	f7fb fc90 	bl	80001f0 <memchr>
 80048d0:	9b04      	ldr	r3, [sp, #16]
 80048d2:	b9d0      	cbnz	r0, 800490a <_svfiprintf_r+0xda>
 80048d4:	06d9      	lsls	r1, r3, #27
 80048d6:	bf44      	itt	mi
 80048d8:	2220      	movmi	r2, #32
 80048da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048de:	071a      	lsls	r2, r3, #28
 80048e0:	bf44      	itt	mi
 80048e2:	222b      	movmi	r2, #43	; 0x2b
 80048e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048e8:	782a      	ldrb	r2, [r5, #0]
 80048ea:	2a2a      	cmp	r2, #42	; 0x2a
 80048ec:	d015      	beq.n	800491a <_svfiprintf_r+0xea>
 80048ee:	9a07      	ldr	r2, [sp, #28]
 80048f0:	462f      	mov	r7, r5
 80048f2:	2000      	movs	r0, #0
 80048f4:	250a      	movs	r5, #10
 80048f6:	4639      	mov	r1, r7
 80048f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048fc:	3b30      	subs	r3, #48	; 0x30
 80048fe:	2b09      	cmp	r3, #9
 8004900:	d94d      	bls.n	800499e <_svfiprintf_r+0x16e>
 8004902:	b1b8      	cbz	r0, 8004934 <_svfiprintf_r+0x104>
 8004904:	e00f      	b.n	8004926 <_svfiprintf_r+0xf6>
 8004906:	462f      	mov	r7, r5
 8004908:	e7b8      	b.n	800487c <_svfiprintf_r+0x4c>
 800490a:	4a40      	ldr	r2, [pc, #256]	; (8004a0c <_svfiprintf_r+0x1dc>)
 800490c:	1a80      	subs	r0, r0, r2
 800490e:	fa0b f000 	lsl.w	r0, fp, r0
 8004912:	4318      	orrs	r0, r3
 8004914:	9004      	str	r0, [sp, #16]
 8004916:	463d      	mov	r5, r7
 8004918:	e7d3      	b.n	80048c2 <_svfiprintf_r+0x92>
 800491a:	9a03      	ldr	r2, [sp, #12]
 800491c:	1d11      	adds	r1, r2, #4
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	9103      	str	r1, [sp, #12]
 8004922:	2a00      	cmp	r2, #0
 8004924:	db01      	blt.n	800492a <_svfiprintf_r+0xfa>
 8004926:	9207      	str	r2, [sp, #28]
 8004928:	e004      	b.n	8004934 <_svfiprintf_r+0x104>
 800492a:	4252      	negs	r2, r2
 800492c:	f043 0302 	orr.w	r3, r3, #2
 8004930:	9207      	str	r2, [sp, #28]
 8004932:	9304      	str	r3, [sp, #16]
 8004934:	783b      	ldrb	r3, [r7, #0]
 8004936:	2b2e      	cmp	r3, #46	; 0x2e
 8004938:	d10c      	bne.n	8004954 <_svfiprintf_r+0x124>
 800493a:	787b      	ldrb	r3, [r7, #1]
 800493c:	2b2a      	cmp	r3, #42	; 0x2a
 800493e:	d133      	bne.n	80049a8 <_svfiprintf_r+0x178>
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	1d1a      	adds	r2, r3, #4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	9203      	str	r2, [sp, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	bfb8      	it	lt
 800494c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004950:	3702      	adds	r7, #2
 8004952:	9305      	str	r3, [sp, #20]
 8004954:	4d2e      	ldr	r5, [pc, #184]	; (8004a10 <_svfiprintf_r+0x1e0>)
 8004956:	7839      	ldrb	r1, [r7, #0]
 8004958:	2203      	movs	r2, #3
 800495a:	4628      	mov	r0, r5
 800495c:	f7fb fc48 	bl	80001f0 <memchr>
 8004960:	b138      	cbz	r0, 8004972 <_svfiprintf_r+0x142>
 8004962:	2340      	movs	r3, #64	; 0x40
 8004964:	1b40      	subs	r0, r0, r5
 8004966:	fa03 f000 	lsl.w	r0, r3, r0
 800496a:	9b04      	ldr	r3, [sp, #16]
 800496c:	4303      	orrs	r3, r0
 800496e:	3701      	adds	r7, #1
 8004970:	9304      	str	r3, [sp, #16]
 8004972:	7839      	ldrb	r1, [r7, #0]
 8004974:	4827      	ldr	r0, [pc, #156]	; (8004a14 <_svfiprintf_r+0x1e4>)
 8004976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800497a:	2206      	movs	r2, #6
 800497c:	1c7e      	adds	r6, r7, #1
 800497e:	f7fb fc37 	bl	80001f0 <memchr>
 8004982:	2800      	cmp	r0, #0
 8004984:	d038      	beq.n	80049f8 <_svfiprintf_r+0x1c8>
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <_svfiprintf_r+0x1e8>)
 8004988:	bb13      	cbnz	r3, 80049d0 <_svfiprintf_r+0x1a0>
 800498a:	9b03      	ldr	r3, [sp, #12]
 800498c:	3307      	adds	r3, #7
 800498e:	f023 0307 	bic.w	r3, r3, #7
 8004992:	3308      	adds	r3, #8
 8004994:	9303      	str	r3, [sp, #12]
 8004996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004998:	444b      	add	r3, r9
 800499a:	9309      	str	r3, [sp, #36]	; 0x24
 800499c:	e76d      	b.n	800487a <_svfiprintf_r+0x4a>
 800499e:	fb05 3202 	mla	r2, r5, r2, r3
 80049a2:	2001      	movs	r0, #1
 80049a4:	460f      	mov	r7, r1
 80049a6:	e7a6      	b.n	80048f6 <_svfiprintf_r+0xc6>
 80049a8:	2300      	movs	r3, #0
 80049aa:	3701      	adds	r7, #1
 80049ac:	9305      	str	r3, [sp, #20]
 80049ae:	4619      	mov	r1, r3
 80049b0:	250a      	movs	r5, #10
 80049b2:	4638      	mov	r0, r7
 80049b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049b8:	3a30      	subs	r2, #48	; 0x30
 80049ba:	2a09      	cmp	r2, #9
 80049bc:	d903      	bls.n	80049c6 <_svfiprintf_r+0x196>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0c8      	beq.n	8004954 <_svfiprintf_r+0x124>
 80049c2:	9105      	str	r1, [sp, #20]
 80049c4:	e7c6      	b.n	8004954 <_svfiprintf_r+0x124>
 80049c6:	fb05 2101 	mla	r1, r5, r1, r2
 80049ca:	2301      	movs	r3, #1
 80049cc:	4607      	mov	r7, r0
 80049ce:	e7f0      	b.n	80049b2 <_svfiprintf_r+0x182>
 80049d0:	ab03      	add	r3, sp, #12
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	4622      	mov	r2, r4
 80049d6:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <_svfiprintf_r+0x1ec>)
 80049d8:	a904      	add	r1, sp, #16
 80049da:	4640      	mov	r0, r8
 80049dc:	f3af 8000 	nop.w
 80049e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80049e4:	4681      	mov	r9, r0
 80049e6:	d1d6      	bne.n	8004996 <_svfiprintf_r+0x166>
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	065b      	lsls	r3, r3, #25
 80049ec:	f53f af35 	bmi.w	800485a <_svfiprintf_r+0x2a>
 80049f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049f2:	b01d      	add	sp, #116	; 0x74
 80049f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f8:	ab03      	add	r3, sp, #12
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	4622      	mov	r2, r4
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <_svfiprintf_r+0x1ec>)
 8004a00:	a904      	add	r1, sp, #16
 8004a02:	4640      	mov	r0, r8
 8004a04:	f000 f882 	bl	8004b0c <_printf_i>
 8004a08:	e7ea      	b.n	80049e0 <_svfiprintf_r+0x1b0>
 8004a0a:	bf00      	nop
 8004a0c:	08004fa0 	.word	0x08004fa0
 8004a10:	08004fa6 	.word	0x08004fa6
 8004a14:	08004faa 	.word	0x08004faa
 8004a18:	00000000 	.word	0x00000000
 8004a1c:	0800477d 	.word	0x0800477d

08004a20 <_printf_common>:
 8004a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a24:	4691      	mov	r9, r2
 8004a26:	461f      	mov	r7, r3
 8004a28:	688a      	ldr	r2, [r1, #8]
 8004a2a:	690b      	ldr	r3, [r1, #16]
 8004a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	bfb8      	it	lt
 8004a34:	4613      	movlt	r3, r2
 8004a36:	f8c9 3000 	str.w	r3, [r9]
 8004a3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a3e:	4606      	mov	r6, r0
 8004a40:	460c      	mov	r4, r1
 8004a42:	b112      	cbz	r2, 8004a4a <_printf_common+0x2a>
 8004a44:	3301      	adds	r3, #1
 8004a46:	f8c9 3000 	str.w	r3, [r9]
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	0699      	lsls	r1, r3, #26
 8004a4e:	bf42      	ittt	mi
 8004a50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a54:	3302      	addmi	r3, #2
 8004a56:	f8c9 3000 	strmi.w	r3, [r9]
 8004a5a:	6825      	ldr	r5, [r4, #0]
 8004a5c:	f015 0506 	ands.w	r5, r5, #6
 8004a60:	d107      	bne.n	8004a72 <_printf_common+0x52>
 8004a62:	f104 0a19 	add.w	sl, r4, #25
 8004a66:	68e3      	ldr	r3, [r4, #12]
 8004a68:	f8d9 2000 	ldr.w	r2, [r9]
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	42ab      	cmp	r3, r5
 8004a70:	dc28      	bgt.n	8004ac4 <_printf_common+0xa4>
 8004a72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a76:	6822      	ldr	r2, [r4, #0]
 8004a78:	3300      	adds	r3, #0
 8004a7a:	bf18      	it	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	0692      	lsls	r2, r2, #26
 8004a80:	d42d      	bmi.n	8004ade <_printf_common+0xbe>
 8004a82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a86:	4639      	mov	r1, r7
 8004a88:	4630      	mov	r0, r6
 8004a8a:	47c0      	blx	r8
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d020      	beq.n	8004ad2 <_printf_common+0xb2>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	68e5      	ldr	r5, [r4, #12]
 8004a94:	f8d9 2000 	ldr.w	r2, [r9]
 8004a98:	f003 0306 	and.w	r3, r3, #6
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	bf08      	it	eq
 8004aa0:	1aad      	subeq	r5, r5, r2
 8004aa2:	68a3      	ldr	r3, [r4, #8]
 8004aa4:	6922      	ldr	r2, [r4, #16]
 8004aa6:	bf0c      	ite	eq
 8004aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aac:	2500      	movne	r5, #0
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	bfc4      	itt	gt
 8004ab2:	1a9b      	subgt	r3, r3, r2
 8004ab4:	18ed      	addgt	r5, r5, r3
 8004ab6:	f04f 0900 	mov.w	r9, #0
 8004aba:	341a      	adds	r4, #26
 8004abc:	454d      	cmp	r5, r9
 8004abe:	d11a      	bne.n	8004af6 <_printf_common+0xd6>
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	e008      	b.n	8004ad6 <_printf_common+0xb6>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4652      	mov	r2, sl
 8004ac8:	4639      	mov	r1, r7
 8004aca:	4630      	mov	r0, r6
 8004acc:	47c0      	blx	r8
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d103      	bne.n	8004ada <_printf_common+0xba>
 8004ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ada:	3501      	adds	r5, #1
 8004adc:	e7c3      	b.n	8004a66 <_printf_common+0x46>
 8004ade:	18e1      	adds	r1, r4, r3
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	2030      	movs	r0, #48	; 0x30
 8004ae4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ae8:	4422      	add	r2, r4
 8004aea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004af2:	3302      	adds	r3, #2
 8004af4:	e7c5      	b.n	8004a82 <_printf_common+0x62>
 8004af6:	2301      	movs	r3, #1
 8004af8:	4622      	mov	r2, r4
 8004afa:	4639      	mov	r1, r7
 8004afc:	4630      	mov	r0, r6
 8004afe:	47c0      	blx	r8
 8004b00:	3001      	adds	r0, #1
 8004b02:	d0e6      	beq.n	8004ad2 <_printf_common+0xb2>
 8004b04:	f109 0901 	add.w	r9, r9, #1
 8004b08:	e7d8      	b.n	8004abc <_printf_common+0x9c>
	...

08004b0c <_printf_i>:
 8004b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b14:	460c      	mov	r4, r1
 8004b16:	7e09      	ldrb	r1, [r1, #24]
 8004b18:	b085      	sub	sp, #20
 8004b1a:	296e      	cmp	r1, #110	; 0x6e
 8004b1c:	4617      	mov	r7, r2
 8004b1e:	4606      	mov	r6, r0
 8004b20:	4698      	mov	r8, r3
 8004b22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b24:	f000 80b3 	beq.w	8004c8e <_printf_i+0x182>
 8004b28:	d822      	bhi.n	8004b70 <_printf_i+0x64>
 8004b2a:	2963      	cmp	r1, #99	; 0x63
 8004b2c:	d036      	beq.n	8004b9c <_printf_i+0x90>
 8004b2e:	d80a      	bhi.n	8004b46 <_printf_i+0x3a>
 8004b30:	2900      	cmp	r1, #0
 8004b32:	f000 80b9 	beq.w	8004ca8 <_printf_i+0x19c>
 8004b36:	2958      	cmp	r1, #88	; 0x58
 8004b38:	f000 8083 	beq.w	8004c42 <_printf_i+0x136>
 8004b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b44:	e032      	b.n	8004bac <_printf_i+0xa0>
 8004b46:	2964      	cmp	r1, #100	; 0x64
 8004b48:	d001      	beq.n	8004b4e <_printf_i+0x42>
 8004b4a:	2969      	cmp	r1, #105	; 0x69
 8004b4c:	d1f6      	bne.n	8004b3c <_printf_i+0x30>
 8004b4e:	6820      	ldr	r0, [r4, #0]
 8004b50:	6813      	ldr	r3, [r2, #0]
 8004b52:	0605      	lsls	r5, r0, #24
 8004b54:	f103 0104 	add.w	r1, r3, #4
 8004b58:	d52a      	bpl.n	8004bb0 <_printf_i+0xa4>
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6011      	str	r1, [r2, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	da03      	bge.n	8004b6a <_printf_i+0x5e>
 8004b62:	222d      	movs	r2, #45	; 0x2d
 8004b64:	425b      	negs	r3, r3
 8004b66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b6a:	486f      	ldr	r0, [pc, #444]	; (8004d28 <_printf_i+0x21c>)
 8004b6c:	220a      	movs	r2, #10
 8004b6e:	e039      	b.n	8004be4 <_printf_i+0xd8>
 8004b70:	2973      	cmp	r1, #115	; 0x73
 8004b72:	f000 809d 	beq.w	8004cb0 <_printf_i+0x1a4>
 8004b76:	d808      	bhi.n	8004b8a <_printf_i+0x7e>
 8004b78:	296f      	cmp	r1, #111	; 0x6f
 8004b7a:	d020      	beq.n	8004bbe <_printf_i+0xb2>
 8004b7c:	2970      	cmp	r1, #112	; 0x70
 8004b7e:	d1dd      	bne.n	8004b3c <_printf_i+0x30>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	f043 0320 	orr.w	r3, r3, #32
 8004b86:	6023      	str	r3, [r4, #0]
 8004b88:	e003      	b.n	8004b92 <_printf_i+0x86>
 8004b8a:	2975      	cmp	r1, #117	; 0x75
 8004b8c:	d017      	beq.n	8004bbe <_printf_i+0xb2>
 8004b8e:	2978      	cmp	r1, #120	; 0x78
 8004b90:	d1d4      	bne.n	8004b3c <_printf_i+0x30>
 8004b92:	2378      	movs	r3, #120	; 0x78
 8004b94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b98:	4864      	ldr	r0, [pc, #400]	; (8004d2c <_printf_i+0x220>)
 8004b9a:	e055      	b.n	8004c48 <_printf_i+0x13c>
 8004b9c:	6813      	ldr	r3, [r2, #0]
 8004b9e:	1d19      	adds	r1, r3, #4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6011      	str	r1, [r2, #0]
 8004ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bac:	2301      	movs	r3, #1
 8004bae:	e08c      	b.n	8004cca <_printf_i+0x1be>
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6011      	str	r1, [r2, #0]
 8004bb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bb8:	bf18      	it	ne
 8004bba:	b21b      	sxthne	r3, r3
 8004bbc:	e7cf      	b.n	8004b5e <_printf_i+0x52>
 8004bbe:	6813      	ldr	r3, [r2, #0]
 8004bc0:	6825      	ldr	r5, [r4, #0]
 8004bc2:	1d18      	adds	r0, r3, #4
 8004bc4:	6010      	str	r0, [r2, #0]
 8004bc6:	0628      	lsls	r0, r5, #24
 8004bc8:	d501      	bpl.n	8004bce <_printf_i+0xc2>
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	e002      	b.n	8004bd4 <_printf_i+0xc8>
 8004bce:	0668      	lsls	r0, r5, #25
 8004bd0:	d5fb      	bpl.n	8004bca <_printf_i+0xbe>
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	4854      	ldr	r0, [pc, #336]	; (8004d28 <_printf_i+0x21c>)
 8004bd6:	296f      	cmp	r1, #111	; 0x6f
 8004bd8:	bf14      	ite	ne
 8004bda:	220a      	movne	r2, #10
 8004bdc:	2208      	moveq	r2, #8
 8004bde:	2100      	movs	r1, #0
 8004be0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004be4:	6865      	ldr	r5, [r4, #4]
 8004be6:	60a5      	str	r5, [r4, #8]
 8004be8:	2d00      	cmp	r5, #0
 8004bea:	f2c0 8095 	blt.w	8004d18 <_printf_i+0x20c>
 8004bee:	6821      	ldr	r1, [r4, #0]
 8004bf0:	f021 0104 	bic.w	r1, r1, #4
 8004bf4:	6021      	str	r1, [r4, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d13d      	bne.n	8004c76 <_printf_i+0x16a>
 8004bfa:	2d00      	cmp	r5, #0
 8004bfc:	f040 808e 	bne.w	8004d1c <_printf_i+0x210>
 8004c00:	4665      	mov	r5, ip
 8004c02:	2a08      	cmp	r2, #8
 8004c04:	d10b      	bne.n	8004c1e <_printf_i+0x112>
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	07db      	lsls	r3, r3, #31
 8004c0a:	d508      	bpl.n	8004c1e <_printf_i+0x112>
 8004c0c:	6923      	ldr	r3, [r4, #16]
 8004c0e:	6862      	ldr	r2, [r4, #4]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	bfde      	ittt	le
 8004c14:	2330      	movle	r3, #48	; 0x30
 8004c16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c1e:	ebac 0305 	sub.w	r3, ip, r5
 8004c22:	6123      	str	r3, [r4, #16]
 8004c24:	f8cd 8000 	str.w	r8, [sp]
 8004c28:	463b      	mov	r3, r7
 8004c2a:	aa03      	add	r2, sp, #12
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	4630      	mov	r0, r6
 8004c30:	f7ff fef6 	bl	8004a20 <_printf_common>
 8004c34:	3001      	adds	r0, #1
 8004c36:	d14d      	bne.n	8004cd4 <_printf_i+0x1c8>
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	b005      	add	sp, #20
 8004c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c42:	4839      	ldr	r0, [pc, #228]	; (8004d28 <_printf_i+0x21c>)
 8004c44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c48:	6813      	ldr	r3, [r2, #0]
 8004c4a:	6821      	ldr	r1, [r4, #0]
 8004c4c:	1d1d      	adds	r5, r3, #4
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6015      	str	r5, [r2, #0]
 8004c52:	060a      	lsls	r2, r1, #24
 8004c54:	d50b      	bpl.n	8004c6e <_printf_i+0x162>
 8004c56:	07ca      	lsls	r2, r1, #31
 8004c58:	bf44      	itt	mi
 8004c5a:	f041 0120 	orrmi.w	r1, r1, #32
 8004c5e:	6021      	strmi	r1, [r4, #0]
 8004c60:	b91b      	cbnz	r3, 8004c6a <_printf_i+0x15e>
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	f022 0220 	bic.w	r2, r2, #32
 8004c68:	6022      	str	r2, [r4, #0]
 8004c6a:	2210      	movs	r2, #16
 8004c6c:	e7b7      	b.n	8004bde <_printf_i+0xd2>
 8004c6e:	064d      	lsls	r5, r1, #25
 8004c70:	bf48      	it	mi
 8004c72:	b29b      	uxthmi	r3, r3
 8004c74:	e7ef      	b.n	8004c56 <_printf_i+0x14a>
 8004c76:	4665      	mov	r5, ip
 8004c78:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c7c:	fb02 3311 	mls	r3, r2, r1, r3
 8004c80:	5cc3      	ldrb	r3, [r0, r3]
 8004c82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c86:	460b      	mov	r3, r1
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	d1f5      	bne.n	8004c78 <_printf_i+0x16c>
 8004c8c:	e7b9      	b.n	8004c02 <_printf_i+0xf6>
 8004c8e:	6813      	ldr	r3, [r2, #0]
 8004c90:	6825      	ldr	r5, [r4, #0]
 8004c92:	6961      	ldr	r1, [r4, #20]
 8004c94:	1d18      	adds	r0, r3, #4
 8004c96:	6010      	str	r0, [r2, #0]
 8004c98:	0628      	lsls	r0, r5, #24
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	d501      	bpl.n	8004ca2 <_printf_i+0x196>
 8004c9e:	6019      	str	r1, [r3, #0]
 8004ca0:	e002      	b.n	8004ca8 <_printf_i+0x19c>
 8004ca2:	066a      	lsls	r2, r5, #25
 8004ca4:	d5fb      	bpl.n	8004c9e <_printf_i+0x192>
 8004ca6:	8019      	strh	r1, [r3, #0]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	6123      	str	r3, [r4, #16]
 8004cac:	4665      	mov	r5, ip
 8004cae:	e7b9      	b.n	8004c24 <_printf_i+0x118>
 8004cb0:	6813      	ldr	r3, [r2, #0]
 8004cb2:	1d19      	adds	r1, r3, #4
 8004cb4:	6011      	str	r1, [r2, #0]
 8004cb6:	681d      	ldr	r5, [r3, #0]
 8004cb8:	6862      	ldr	r2, [r4, #4]
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f7fb fa97 	bl	80001f0 <memchr>
 8004cc2:	b108      	cbz	r0, 8004cc8 <_printf_i+0x1bc>
 8004cc4:	1b40      	subs	r0, r0, r5
 8004cc6:	6060      	str	r0, [r4, #4]
 8004cc8:	6863      	ldr	r3, [r4, #4]
 8004cca:	6123      	str	r3, [r4, #16]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd2:	e7a7      	b.n	8004c24 <_printf_i+0x118>
 8004cd4:	6923      	ldr	r3, [r4, #16]
 8004cd6:	462a      	mov	r2, r5
 8004cd8:	4639      	mov	r1, r7
 8004cda:	4630      	mov	r0, r6
 8004cdc:	47c0      	blx	r8
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d0aa      	beq.n	8004c38 <_printf_i+0x12c>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	079b      	lsls	r3, r3, #30
 8004ce6:	d413      	bmi.n	8004d10 <_printf_i+0x204>
 8004ce8:	68e0      	ldr	r0, [r4, #12]
 8004cea:	9b03      	ldr	r3, [sp, #12]
 8004cec:	4298      	cmp	r0, r3
 8004cee:	bfb8      	it	lt
 8004cf0:	4618      	movlt	r0, r3
 8004cf2:	e7a3      	b.n	8004c3c <_printf_i+0x130>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	464a      	mov	r2, r9
 8004cf8:	4639      	mov	r1, r7
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	47c0      	blx	r8
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d09a      	beq.n	8004c38 <_printf_i+0x12c>
 8004d02:	3501      	adds	r5, #1
 8004d04:	68e3      	ldr	r3, [r4, #12]
 8004d06:	9a03      	ldr	r2, [sp, #12]
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	42ab      	cmp	r3, r5
 8004d0c:	dcf2      	bgt.n	8004cf4 <_printf_i+0x1e8>
 8004d0e:	e7eb      	b.n	8004ce8 <_printf_i+0x1dc>
 8004d10:	2500      	movs	r5, #0
 8004d12:	f104 0919 	add.w	r9, r4, #25
 8004d16:	e7f5      	b.n	8004d04 <_printf_i+0x1f8>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1ac      	bne.n	8004c76 <_printf_i+0x16a>
 8004d1c:	7803      	ldrb	r3, [r0, #0]
 8004d1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d26:	e76c      	b.n	8004c02 <_printf_i+0xf6>
 8004d28:	08004fb1 	.word	0x08004fb1
 8004d2c:	08004fc2 	.word	0x08004fc2

08004d30 <memcpy>:
 8004d30:	b510      	push	{r4, lr}
 8004d32:	1e43      	subs	r3, r0, #1
 8004d34:	440a      	add	r2, r1
 8004d36:	4291      	cmp	r1, r2
 8004d38:	d100      	bne.n	8004d3c <memcpy+0xc>
 8004d3a:	bd10      	pop	{r4, pc}
 8004d3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d44:	e7f7      	b.n	8004d36 <memcpy+0x6>

08004d46 <memmove>:
 8004d46:	4288      	cmp	r0, r1
 8004d48:	b510      	push	{r4, lr}
 8004d4a:	eb01 0302 	add.w	r3, r1, r2
 8004d4e:	d807      	bhi.n	8004d60 <memmove+0x1a>
 8004d50:	1e42      	subs	r2, r0, #1
 8004d52:	4299      	cmp	r1, r3
 8004d54:	d00a      	beq.n	8004d6c <memmove+0x26>
 8004d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d5a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d5e:	e7f8      	b.n	8004d52 <memmove+0xc>
 8004d60:	4283      	cmp	r3, r0
 8004d62:	d9f5      	bls.n	8004d50 <memmove+0xa>
 8004d64:	1881      	adds	r1, r0, r2
 8004d66:	1ad2      	subs	r2, r2, r3
 8004d68:	42d3      	cmn	r3, r2
 8004d6a:	d100      	bne.n	8004d6e <memmove+0x28>
 8004d6c:	bd10      	pop	{r4, pc}
 8004d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d72:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004d76:	e7f7      	b.n	8004d68 <memmove+0x22>

08004d78 <_free_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	2900      	cmp	r1, #0
 8004d7e:	d045      	beq.n	8004e0c <_free_r+0x94>
 8004d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d84:	1f0c      	subs	r4, r1, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bfb8      	it	lt
 8004d8a:	18e4      	addlt	r4, r4, r3
 8004d8c:	f000 f8d2 	bl	8004f34 <__malloc_lock>
 8004d90:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <_free_r+0x98>)
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	4610      	mov	r0, r2
 8004d96:	b933      	cbnz	r3, 8004da6 <_free_r+0x2e>
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	6014      	str	r4, [r2, #0]
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004da2:	f000 b8c8 	b.w	8004f36 <__malloc_unlock>
 8004da6:	42a3      	cmp	r3, r4
 8004da8:	d90c      	bls.n	8004dc4 <_free_r+0x4c>
 8004daa:	6821      	ldr	r1, [r4, #0]
 8004dac:	1862      	adds	r2, r4, r1
 8004dae:	4293      	cmp	r3, r2
 8004db0:	bf04      	itt	eq
 8004db2:	681a      	ldreq	r2, [r3, #0]
 8004db4:	685b      	ldreq	r3, [r3, #4]
 8004db6:	6063      	str	r3, [r4, #4]
 8004db8:	bf04      	itt	eq
 8004dba:	1852      	addeq	r2, r2, r1
 8004dbc:	6022      	streq	r2, [r4, #0]
 8004dbe:	6004      	str	r4, [r0, #0]
 8004dc0:	e7ec      	b.n	8004d9c <_free_r+0x24>
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	b10a      	cbz	r2, 8004dcc <_free_r+0x54>
 8004dc8:	42a2      	cmp	r2, r4
 8004dca:	d9fa      	bls.n	8004dc2 <_free_r+0x4a>
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	1858      	adds	r0, r3, r1
 8004dd0:	42a0      	cmp	r0, r4
 8004dd2:	d10b      	bne.n	8004dec <_free_r+0x74>
 8004dd4:	6820      	ldr	r0, [r4, #0]
 8004dd6:	4401      	add	r1, r0
 8004dd8:	1858      	adds	r0, r3, r1
 8004dda:	4282      	cmp	r2, r0
 8004ddc:	6019      	str	r1, [r3, #0]
 8004dde:	d1dd      	bne.n	8004d9c <_free_r+0x24>
 8004de0:	6810      	ldr	r0, [r2, #0]
 8004de2:	6852      	ldr	r2, [r2, #4]
 8004de4:	605a      	str	r2, [r3, #4]
 8004de6:	4401      	add	r1, r0
 8004de8:	6019      	str	r1, [r3, #0]
 8004dea:	e7d7      	b.n	8004d9c <_free_r+0x24>
 8004dec:	d902      	bls.n	8004df4 <_free_r+0x7c>
 8004dee:	230c      	movs	r3, #12
 8004df0:	602b      	str	r3, [r5, #0]
 8004df2:	e7d3      	b.n	8004d9c <_free_r+0x24>
 8004df4:	6820      	ldr	r0, [r4, #0]
 8004df6:	1821      	adds	r1, r4, r0
 8004df8:	428a      	cmp	r2, r1
 8004dfa:	bf04      	itt	eq
 8004dfc:	6811      	ldreq	r1, [r2, #0]
 8004dfe:	6852      	ldreq	r2, [r2, #4]
 8004e00:	6062      	str	r2, [r4, #4]
 8004e02:	bf04      	itt	eq
 8004e04:	1809      	addeq	r1, r1, r0
 8004e06:	6021      	streq	r1, [r4, #0]
 8004e08:	605c      	str	r4, [r3, #4]
 8004e0a:	e7c7      	b.n	8004d9c <_free_r+0x24>
 8004e0c:	bd38      	pop	{r3, r4, r5, pc}
 8004e0e:	bf00      	nop
 8004e10:	20004090 	.word	0x20004090

08004e14 <_malloc_r>:
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	1ccd      	adds	r5, r1, #3
 8004e18:	f025 0503 	bic.w	r5, r5, #3
 8004e1c:	3508      	adds	r5, #8
 8004e1e:	2d0c      	cmp	r5, #12
 8004e20:	bf38      	it	cc
 8004e22:	250c      	movcc	r5, #12
 8004e24:	2d00      	cmp	r5, #0
 8004e26:	4606      	mov	r6, r0
 8004e28:	db01      	blt.n	8004e2e <_malloc_r+0x1a>
 8004e2a:	42a9      	cmp	r1, r5
 8004e2c:	d903      	bls.n	8004e36 <_malloc_r+0x22>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	2000      	movs	r0, #0
 8004e34:	bd70      	pop	{r4, r5, r6, pc}
 8004e36:	f000 f87d 	bl	8004f34 <__malloc_lock>
 8004e3a:	4a21      	ldr	r2, [pc, #132]	; (8004ec0 <_malloc_r+0xac>)
 8004e3c:	6814      	ldr	r4, [r2, #0]
 8004e3e:	4621      	mov	r1, r4
 8004e40:	b991      	cbnz	r1, 8004e68 <_malloc_r+0x54>
 8004e42:	4c20      	ldr	r4, [pc, #128]	; (8004ec4 <_malloc_r+0xb0>)
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	b91b      	cbnz	r3, 8004e50 <_malloc_r+0x3c>
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f000 f863 	bl	8004f14 <_sbrk_r>
 8004e4e:	6020      	str	r0, [r4, #0]
 8004e50:	4629      	mov	r1, r5
 8004e52:	4630      	mov	r0, r6
 8004e54:	f000 f85e 	bl	8004f14 <_sbrk_r>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d124      	bne.n	8004ea6 <_malloc_r+0x92>
 8004e5c:	230c      	movs	r3, #12
 8004e5e:	6033      	str	r3, [r6, #0]
 8004e60:	4630      	mov	r0, r6
 8004e62:	f000 f868 	bl	8004f36 <__malloc_unlock>
 8004e66:	e7e4      	b.n	8004e32 <_malloc_r+0x1e>
 8004e68:	680b      	ldr	r3, [r1, #0]
 8004e6a:	1b5b      	subs	r3, r3, r5
 8004e6c:	d418      	bmi.n	8004ea0 <_malloc_r+0x8c>
 8004e6e:	2b0b      	cmp	r3, #11
 8004e70:	d90f      	bls.n	8004e92 <_malloc_r+0x7e>
 8004e72:	600b      	str	r3, [r1, #0]
 8004e74:	50cd      	str	r5, [r1, r3]
 8004e76:	18cc      	adds	r4, r1, r3
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f000 f85c 	bl	8004f36 <__malloc_unlock>
 8004e7e:	f104 000b 	add.w	r0, r4, #11
 8004e82:	1d23      	adds	r3, r4, #4
 8004e84:	f020 0007 	bic.w	r0, r0, #7
 8004e88:	1ac3      	subs	r3, r0, r3
 8004e8a:	d0d3      	beq.n	8004e34 <_malloc_r+0x20>
 8004e8c:	425a      	negs	r2, r3
 8004e8e:	50e2      	str	r2, [r4, r3]
 8004e90:	e7d0      	b.n	8004e34 <_malloc_r+0x20>
 8004e92:	428c      	cmp	r4, r1
 8004e94:	684b      	ldr	r3, [r1, #4]
 8004e96:	bf16      	itet	ne
 8004e98:	6063      	strne	r3, [r4, #4]
 8004e9a:	6013      	streq	r3, [r2, #0]
 8004e9c:	460c      	movne	r4, r1
 8004e9e:	e7eb      	b.n	8004e78 <_malloc_r+0x64>
 8004ea0:	460c      	mov	r4, r1
 8004ea2:	6849      	ldr	r1, [r1, #4]
 8004ea4:	e7cc      	b.n	8004e40 <_malloc_r+0x2c>
 8004ea6:	1cc4      	adds	r4, r0, #3
 8004ea8:	f024 0403 	bic.w	r4, r4, #3
 8004eac:	42a0      	cmp	r0, r4
 8004eae:	d005      	beq.n	8004ebc <_malloc_r+0xa8>
 8004eb0:	1a21      	subs	r1, r4, r0
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f000 f82e 	bl	8004f14 <_sbrk_r>
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d0cf      	beq.n	8004e5c <_malloc_r+0x48>
 8004ebc:	6025      	str	r5, [r4, #0]
 8004ebe:	e7db      	b.n	8004e78 <_malloc_r+0x64>
 8004ec0:	20004090 	.word	0x20004090
 8004ec4:	20004094 	.word	0x20004094

08004ec8 <_realloc_r>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	4607      	mov	r7, r0
 8004ecc:	4614      	mov	r4, r2
 8004ece:	460e      	mov	r6, r1
 8004ed0:	b921      	cbnz	r1, 8004edc <_realloc_r+0x14>
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ed8:	f7ff bf9c 	b.w	8004e14 <_malloc_r>
 8004edc:	b922      	cbnz	r2, 8004ee8 <_realloc_r+0x20>
 8004ede:	f7ff ff4b 	bl	8004d78 <_free_r>
 8004ee2:	4625      	mov	r5, r4
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ee8:	f000 f826 	bl	8004f38 <_malloc_usable_size_r>
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d20f      	bcs.n	8004f10 <_realloc_r+0x48>
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	f7ff ff8e 	bl	8004e14 <_malloc_r>
 8004ef8:	4605      	mov	r5, r0
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d0f2      	beq.n	8004ee4 <_realloc_r+0x1c>
 8004efe:	4631      	mov	r1, r6
 8004f00:	4622      	mov	r2, r4
 8004f02:	f7ff ff15 	bl	8004d30 <memcpy>
 8004f06:	4631      	mov	r1, r6
 8004f08:	4638      	mov	r0, r7
 8004f0a:	f7ff ff35 	bl	8004d78 <_free_r>
 8004f0e:	e7e9      	b.n	8004ee4 <_realloc_r+0x1c>
 8004f10:	4635      	mov	r5, r6
 8004f12:	e7e7      	b.n	8004ee4 <_realloc_r+0x1c>

08004f14 <_sbrk_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4c06      	ldr	r4, [pc, #24]	; (8004f30 <_sbrk_r+0x1c>)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	6023      	str	r3, [r4, #0]
 8004f20:	f7fb fc78 	bl	8000814 <_sbrk>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_sbrk_r+0x1a>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_sbrk_r+0x1a>
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	200041b0 	.word	0x200041b0

08004f34 <__malloc_lock>:
 8004f34:	4770      	bx	lr

08004f36 <__malloc_unlock>:
 8004f36:	4770      	bx	lr

08004f38 <_malloc_usable_size_r>:
 8004f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f3c:	1f18      	subs	r0, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bfbc      	itt	lt
 8004f42:	580b      	ldrlt	r3, [r1, r0]
 8004f44:	18c0      	addlt	r0, r0, r3
 8004f46:	4770      	bx	lr

08004f48 <_init>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	bf00      	nop
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr

08004f54 <_fini>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	bf00      	nop
 8004f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	469e      	mov	lr, r3
 8004f5e:	4770      	bx	lr
